#usda 1.0
(
    defaultPrim = "smplx_humanoid"
    upAxis = "Z"
)

def Xform "smplx_humanoid" (
    delete apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    def Xform "bodies"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Pelvis" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI", "PhysicsArticulationRootAPI", "PhysxArticulationAPI", "AnimationDataAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.003100000089034438, -0.3513999879360199, 0.012000000104308128, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_0" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.084, -0.1079, -0.0846), (0.084, 0.1079, 0.0846)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.08399999886751175, 0, 0, 0), (0, 0.10790000110864639, 0, 0), (0, 0, 0.08460000157356262, 0), (-0.01679999940097332, -0.003100000089034438, -0.0215000007301569, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_0" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.084, -0.1079, -0.0846), (0.084, 0.1079, 0.0846)]

                    matrix4d xformOp:transform = ( (0.08399999886751175, 0, 0, 0), (0, 0.10790000110864639, 0, 0), (0, 0, 0.08460000157356262, 0), (-0.01679999940097332, -0.003100000089034438, -0.0215000007301569, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Hip" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.02290000021457672, -0.29319998621940613, -0.08079999685287476, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_1" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.175319, -0.0605, -0.0605), (0.175319, 0.0605, 0.0605)]
                    double height = 0.2296379953622818
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.060499999672174454
                    matrix4d xformOp:transform = ( (-0.024386089686322165, 0.14326896495800767, -0.9893832281363757, 0), (-0.14326896495800767, 0.9789609401958844, 0.1452910119930806, 0), (0.9893832281363757, 0.1452910119930806, -0.003347029882206698, 0), (-0.004699999932199717, 0.02735000103712082, -0.18940000236034393, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_1" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.175319, -0.0605, -0.0605), (0.175319, 0.0605, 0.0605)]
                    double height = 0.2296379953622818

                    double radius = 0.060499999672174454
                    matrix4d xformOp:transform = ( (-0.024386089686322165, 0.14326896495800767, -0.9893832281363757, 0), (-0.14326896495800767, 0.9789609401958844, 0.1452910119930806, 0), (0.9893832281363757, 0.1452910119930806, -0.003347029882206698, 0), (-0.004699999932199717, 0.02735000103712082, -0.18940000236034393, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Knee" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Toe>,
                </smplx_humanoid/bodies/R_Ankle>,
                </smplx_humanoid/bodies/R_Toe>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.03229999914765358, -0.2384999841451645, -0.4596000015735626, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_2" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.1752767, -0.0533, -0.0533), (0.1752767, 0.0533, 0.0533)]
                    double height = 0.2439534068107605
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.053300000727176666
                    matrix4d xformOp:transform = ( (-0.0782935535820326, -0.10698763973340952, -0.9911728737064749, 0), (0.10698763973340952, 0.9875813430202771, -0.11505100922721923, 0), (0.9911728737064749, -0.11505100922721923, -0.06587489660230972, 0), (-0.015949999913573265, -0.02174999937415123, -0.20149999856948853, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_2" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.1752767, -0.0533, -0.0533), (0.1752767, 0.0533, 0.0533)]
                    double height = 0.2439534068107605

                    double radius = 0.053300000727176666
                    matrix4d xformOp:transform = ( (-0.0782935535820326, -0.10698763973340952, -0.9911728737064749, 0), (0.10698763973340952, 0.9875813430202771, -0.11505100922721923, 0), (0.9911728737064749, -0.11505100922721923, -0.06587489660230972, 0), (-0.015949999913573265, -0.02174999937415123, -0.20149999856948853, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Ankle" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smplx_humanoid/bodies/R_Knee>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.06419999897480011, -0.28199997544288635, -0.8626999855041504, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_3" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0857, -0.0498, -0.0463), (0.0857, 0.0498, 0.0463)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.08569999784231186, 0, 0, 0), (0, 0.049800001084804535, 0, 0), (0, 0, 0.046300001442432404, 0), (0.02319999970495701, 0.040699999779462814, -0.028699999675154686, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_3" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0857, -0.0498, -0.0463), (0.0857, 0.0498, 0.0463)]

                    matrix4d xformOp:transform = ( (0.08569999784231186, 0, 0, 0), (0, 0.049800001084804535, 0, 0), (0, 0, 0.046300001442432404, 0), (0.02319999970495701, 0.040699999779462814, -0.028699999675154686, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Toe" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Knee>,
                </smplx_humanoid/bodies/R_Knee>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.053999997675418854, -0.23469997942447662, -0.920699954032898, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_4" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0495, -0.0478, -0.0205), (0.0495, 0.0478, 0.0205)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.0494999997317791, 0, 0, 0), (0, 0.04780000075697899, 0, 0), (0, 0, 0.020500000566244125, 0), (0.025599999353289604, -0.006500000134110451, 0.0034000000450760126, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_4" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0495, -0.0478, -0.0205), (0.0495, 0.0478, 0.0205)]

                    matrix4d xformOp:transform = ( (0.0494999997317791, 0, 0, 0), (0, 0.04780000075697899, 0, 0), (0, 0, 0.020500000566244125, 0), (0.025599999353289604, -0.006500000134110451, 0.0034000000450760126, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Hip" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.018199998885393143, -0.4146999716758728, -0.09189999848604202, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_5" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.16942702, -0.0598, -0.0598), (0.16942702, 0.0598, 0.0598)]
                    double height = 0.2192540466785431
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05979999899864197
                    matrix4d xformOp:transform = ( (-0.046065398824367776, -0.12132045752650811, -0.9915439652292406, 0), (0.12132045752650811, 0.9845705860934686, -0.1261035653669751, 0), (0.9915439652292406, -0.1261035653669751, -0.030635984917836367, 0), (-0.008450000546872616, -0.022099999710917473, -0.18119999766349792, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_5" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.16942702, -0.0598, -0.0598), (0.16942702, 0.0598, 0.0598)]
                    double height = 0.2192540466785431

                    double radius = 0.05979999899864197
                    matrix4d xformOp:transform = ( (-0.046065398824367776, -0.12132045752650811, -0.9915439652292406, 0), (0.12132045752650811, 0.9845705860934686, -0.1261035653669751, 0), (0.9915439652292406, -0.1261035653669751, -0.030635984917836367, 0), (-0.008450000546872616, -0.022099999710917473, -0.18119999766349792, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Knee" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Ankle>,
                </smplx_humanoid/bodies/L_Toe>,
                </smplx_humanoid/bodies/R_Toe>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.034999996423721313, -0.45889997482299805, -0.4542999863624573, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_6" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17858656, -0.0551, -0.0551), (0.17858656, 0.0551, 0.0551)]
                    double height = 0.24697311222553253
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05510000139474869
                    matrix4d xformOp:transform = ( (-0.04939813577483676, 0.03725101411461651, -0.9980842260438294, 0), (-0.03725101411461651, 0.9985402530821686, 0.0391116968848344, 0), (0.9980842260438294, 0.0391116968848344, -0.04793838885700552, 0), (-0.010100000537931919, 0.007699999958276749, -0.20534999668598175, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_6" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17858656, -0.0551, -0.0551), (0.17858656, 0.0551, 0.0551)]
                    double height = 0.24697311222553253

                    double radius = 0.05510000139474869
                    matrix4d xformOp:transform = ( (-0.04939813577483676, 0.03725101411461651, -0.9980842260438294, 0), (-0.03725101411461651, 0.9985402530821686, 0.0391116968848344, 0), (0.9980842260438294, 0.0391116968848344, -0.04793838885700552, 0), (-0.010100000537931919, 0.007699999958276749, -0.20534999668598175, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Ankle" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smplx_humanoid/bodies/L_Knee>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.05519999563694, -0.44349998235702515, -0.8650000095367432, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_7" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0857, -0.0498, -0.0464), (0.0857, 0.0498, 0.0464)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.08569999784231186, 0, 0, 0), (0, 0.049800001084804535, 0, 0), (0, 0, 0.04639999940991402, 0), (0.0142000000923872, -0.024299999698996544, -0.02630000002682209, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_7" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0857, -0.0498, -0.0464), (0.0857, 0.0498, 0.0464)]

                    matrix4d xformOp:transform = ( (0.08569999784231186, 0, 0, 0), (0, 0.049800001084804535, 0, 0), (0, 0, 0.04639999940991402, 0), (0.0142000000923872, -0.024299999698996544, -0.02630000002682209, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Toe" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smplx_humanoid/bodies/L_Knee>,
                </smplx_humanoid/bodies/R_Knee>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.06380000710487366, -0.4822999835014343, -0.92330002784729, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_8" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0495, -0.0478, -0.0205), (0.0495, 0.0478, 0.0205)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.0494999997317791, 0, 0, 0), (0, 0.04780000075697899, 0, 0), (0, 0, 0.020500000566244125, 0), (0.015799999237060547, 0.014499999582767487, 0.006200000178068876, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_8" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0495, -0.0478, -0.0205), (0.0495, 0.0478, 0.0205)]

                    matrix4d xformOp:transform = ( (0.0494999997317791, 0, 0, 0), (0, 0.04780000075697899, 0, 0), (0, 0, 0.020500000566244125, 0), (0.015799999237060547, 0.014499999582767487, 0.006200000178068876, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Torso" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.02449999935925007, -0.35419997572898865, 0.12189999967813492, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_9" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.07852212, -0.0719, -0.0719), (0.07852212, 0.0719, 0.0719)]
                    double height = 0.013244240544736385
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.07190000265836716
                    matrix4d xformOp:transform = ( (-0.045302761709778316, 0.06795406019937111, 0.9966594535015361, 0), (-0.06795406019937111, 0.9951631225393233, -0.07094086258375754, 0), (-0.9966594535015361, -0.07094086258375754, -0.04046588424910169, 0), (-0.003000000026077032, 0.004750000312924385, 0.06589999794960022, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_9" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.07852212, -0.0719, -0.0719), (0.07852212, 0.0719, 0.0719)]
                    double height = 0.013244240544736385

                    double radius = 0.07190000265836716
                    matrix4d xformOp:transform = ( (-0.045302761709778316, 0.06795406019937111, 0.9966594535015361, 0), (-0.06795406019937111, 0.9951631225393233, -0.07094086258375754, 0), (-0.9966594535015361, -0.07094086258375754, -0.04046588424910169, 0), (-0.003000000026077032, 0.004750000312924385, 0.06589999794960022, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Spine" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.030400000512599945, -0.3447999656200409, 0.25380000472068787, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_10" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.079003744, -0.076, -0.076), (0.079003744, 0.076, 0.076)]
                    double height = 0.006007495801895857
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.07599999755620956
                    matrix4d xformOp:transform = ( (0.4660842410704791, -0.18310460126078887, 0.8655854898427435, 0), (0.18310460126078887, 0.9771314009742755, 0.10810611723244534, 0), (-0.8655854898427435, 0.10810611723244534, 0.48895284009620354, 0), (0.0142000000923872, -0.0056500001810491085, 0.026099998503923416, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_10" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.079003744, -0.076, -0.076), (0.079003744, 0.076, 0.076)]
                    double height = 0.006007495801895857

                    double radius = 0.07599999755620956
                    matrix4d xformOp:transform = ( (0.4660842410704791, -0.18310460126078887, 0.8655854898427435, 0), (0.18310460126078887, 0.9771314009742755, 0.10810611723244534, 0), (-0.8655854898427435, 0.10810611723244534, 0.48895284009620354, 0), (0.0142000000923872, -0.0056500001810491085, 0.026099998503923416, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Chest" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smplx_humanoid/bodies/Torso>,
                </smplx_humanoid/bodies/Head>,
                </smplx_humanoid/bodies/L_Shoulder>,
                </smplx_humanoid/bodies/R_Shoulder>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0020000003278255463, -0.3560999631881714, 0.3059999942779541, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_11" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.10842805, -0.1028, -0.1028), (0.10842805, 0.1028, 0.1028)]
                    double height = 0.011256108060479164
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.10279999673366547
                    matrix4d xformOp:transform = ( (-0.15991312805796598, -0.04442031423074866, 0.9861310618748576, 0), (0.04442031423074866, 0.9976512373921333, 0.05214253443943928, 0), (-0.9861310618748576, 0.05214253443943928, -0.15756436545009933, 0), (-0.008700000122189522, -0.0022499999031424522, 0.05574999749660492, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_11" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.10842805, -0.1028, -0.1028), (0.10842805, 0.1028, 0.1028)]
                    double height = 0.011256108060479164

                    double radius = 0.10279999673366547
                    matrix4d xformOp:transform = ( (-0.15991312805796598, -0.04442031423074866, 0.9861310618748576, 0), (0.04442031423074866, 0.9976512373921333, 0.05214253443943928, 0), (-0.9861310618748576, 0.05214253443943928, -0.15756436545009933, 0), (-0.008700000122189522, -0.0022499999031424522, 0.05574999749660492, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Neck" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.03359999880194664, -0.3682999610900879, 0.47119998931884766, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_12" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.09101461, -0.0419, -0.0419), (0.09101461, 0.0419, 0.0419)]
                    double height = 0.09822922199964523
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04190000146627426
                    matrix4d xformOp:transform = ( (0.12725319764637533, 0.15066800641645273, 0.9803600639396777, 0), (-0.15066800641645273, 0.9798618035664504, -0.13103434506629696, 0), (-0.9803600639396777, -0.13103434506629696, 0.14739139407992496, 0), (0.010350000113248825, 0.012399999424815178, 0.08024999499320984, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_12" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.09101461, -0.0419, -0.0419), (0.09101461, 0.0419, 0.0419)]
                    double height = 0.09822922199964523

                    double radius = 0.04190000146627426
                    matrix4d xformOp:transform = ( (0.12725319764637533, 0.15066800641645273, 0.9803600639396777, 0), (-0.15066800641645273, 0.9798618035664504, -0.13103434506629696, 0), (-0.9803600639396777, -0.13103434506629696, 0.14739139407992496, 0), (0.010350000113248825, 0.012399999424815178, 0.08024999499320984, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Head" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.01289999857544899, -0.34349995851516724, 0.6316999793052673, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_13" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0797, -0.0609, -0.1096), (0.0797, 0.0609, 0.1096)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.07970000058412552, 0, 0, 0), (0, 0.0608999989926815, 0, 0), (0, 0, 0.1096000000834465, 0), (-0.0007999999797903001, -0.011099999770522118, 0.0414000004529953, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_13" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0797, -0.0609, -0.1096), (0.0797, 0.0609, 0.1096)]

                    matrix4d xformOp:transform = ( (0.07970000058412552, 0, 0, 0), (0, 0.0608999989926815, 0, 0), (0, 0, 0.1096000000834465, 0), (-0.0007999999797903001, -0.011099999770522118, 0.0414000004529953, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Thorax" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.009200000204145908, -0.3096999526023865, 0.39089998602867126, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_14" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08885352, -0.0488, -0.0488), (0.08885352, 0.0488, 0.0488)]
                    double height = 0.08010704815387726
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04879999905824661
                    matrix4d xformOp:transform = ( (-0.11609470807417921, 0.8938039815541359, 0.43317034422148026, 0), (-0.8938039815541359, 0.09618655385309438, -0.4380212995904458, 0), (-0.43317034422148026, -0.4380212995904458, 0.7877187380727264, 0), (-0.007750000339001417, 0.05959999933838844, 0.028850000351667404, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_14" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08885352, -0.0488, -0.0488), (0.08885352, 0.0488, 0.0488)]
                    double height = 0.08010704815387726

                    double radius = 0.04879999905824661
                    matrix4d xformOp:transform = ( (-0.11609470807417921, 0.8938039815541359, 0.43317034422148026, 0), (-0.8938039815541359, 0.09618655385309438, -0.4380212995904458, 0), (-0.43317034422148026, -0.4380212995904458, 0.7877187380727264, 0), (-0.007750000339001417, 0.05959999933838844, 0.028850000351667404, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Shoulder" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.024700000882148743, -0.19049996137619019, 0.44859999418258667, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_15" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13248293, -0.0522, -0.0522), (0.13248293, 0.0522, 0.0522)]
                    double height = 0.16056585311889648
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05220000073313713
                    matrix4d xformOp:transform = ( (-0.1588134539177699, 0.9497661794731869, -0.269671341215151, 0), (-0.9497661794731869, -0.07236102302045566, 0.3044802411317509, 0), (0.269671341215151, 0.3044802411317509, 0.9135475691026858, 0), (-0.021250002086162567, 0.1270499974489212, -0.03604999929666519, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_15" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13248293, -0.0522, -0.0522), (0.13248293, 0.0522, 0.0522)]
                    double height = 0.16056585311889648

                    double radius = 0.05220000073313713
                    matrix4d xformOp:transform = ( (-0.1588134539177699, 0.9497661794731869, -0.269671341215151, 0), (-0.9497661794731869, -0.07236102302045566, 0.3044802411317509, 0), (0.269671341215151, 0.3044802411317509, 0.9135475691026858, 0), (-0.021250002086162567, 0.1270499974489212, -0.03604999929666519, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Elbow" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.06720000505447388, 0.06360003352165222, 0.3763999938964844, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_16" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11602709, -0.0401, -0.0401), (0.11602709, 0.0401, 0.0401)]
                    double height = 0.15185417234897614
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04010000079870224
                    matrix4d xformOp:transform = ( (-0.009878098099095567, 0.9956921380615569, 0.09219372425350869, 0), (-0.9956921380615569, -0.001293617762513577, -0.0927123798250662, 0), (-0.09219372425350869, -0.0927123798250662, 0.991415519663418, 0), (-0.0012500000884756446, 0.12600000202655792, 0.011599999852478504, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_16" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11602709, -0.0401, -0.0401), (0.11602709, 0.0401, 0.0401)]
                    double height = 0.15185417234897614

                    double radius = 0.04010000079870224
                    matrix4d xformOp:transform = ( (-0.009878098099095567, 0.9956921380615569, 0.09219372425350869, 0), (-0.9956921380615569, -0.001293617762513577, -0.0927123798250662, 0), (-0.09219372425350869, -0.0927123798250662, 0.991415519663418, 0), (-0.0012500000884756446, 0.12600000202655792, 0.011599999852478504, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Wrist" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.06970000267028809, 0.31560003757476807, 0.39959999918937683, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_17" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.04, -0.0428, -0.0159), (0.04, 0.0428, 0.0159)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.03999999910593033, 0, 0, 0), (0, 0.04280000180006027, 0, 0), (0, 0, 0.01590000092983246, 0), (-0.003100000089034438, 0.052299998700618744, -0.0013000000035390258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_17" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.04, -0.0428, -0.0159), (0.04, 0.0428, 0.0159)]

                    matrix4d xformOp:transform = ( (0.03999999910593033, 0, 0, 0), (0, 0.04280000180006027, 0, 0), (0, 0, 0.01590000092983246, 0), (-0.003100000089034438, 0.052299998700618744, -0.0013000000035390258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Index1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.050300002098083496, 0.41750001907348633, 0.39089998602867126, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_18" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (0.093095667266752, 0.9930208180783282, 0.07240776706685637, 0), (-0.9930208180783282, 0.09789203112892864, -0.06577870522954044, 0), (-0.07240776706685637, -0.06577870522954044, 0.9952036361378234, 0), (0.001500000013038516, 0.01599999889731407, 0.0010999999940395355, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_18" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225

                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (0.093095667266752, 0.9930208180783282, 0.07240776706685637, 0), (-0.9930208180783282, 0.09789203112892864, -0.06577870522954044, 0), (-0.07240776706685637, -0.06577870522954044, 0.9952036361378234, 0), (0.001500000013038516, 0.01599999889731407, 0.0010999999940395355, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Index2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.047300003468990326, 0.44940000772476196, 0.39309999346733093, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_19" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (9.65033349897837e-8, 0.9946656921278176, -0.10315052191829199, 0), (-0.9946656921278176, 0.010640127039543756, 0.1026002887890618, 0), (0.10315052191829199, 0.1026002887890618, 0.9893599694637912, 0), (0, 0.011249999515712261, -0.0012000000569969416, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_19" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597

                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (9.65033349897837e-8, 0.9946656921278176, -0.10315052191829199, 0), (-0.9946656921278176, 0.010640127039543756, 0.1026002887890618, 0), (0.10315052191829199, 0.1026002887890618, 0.9893599694637912, 0), (0, 0.011249999515712261, -0.0012000000569969416, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Index3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.047200001776218414, 0.47190001606941223, 0.39069998264312744, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_20" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013775127, -0.0064, -0.0064), (0.013775127, 0.0064, 0.0064)]
                    double height = 0.014750254340469837
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (0.08135445762860971, 0.9965930785927668, -0.013559089728274465, 0), (-0.9965930785927668, 0.08152447485392145, 0.01249626585432928, 0), (0.013559089728274465, 0.01249626585432928, 0.9998299827746883, 0), (0.0009999999310821295, 0.012250000610947609, -0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_20" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013775127, -0.0064, -0.0064), (0.013775127, 0.0064, 0.0064)]
                    double height = 0.014750254340469837

                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (0.08135445762860971, 0.9965930785927668, -0.013559089728274465, 0), (-0.9965930785927668, 0.08152447485392145, 0.01249626585432928, 0), (0.013559089728274465, 0.01249626585432928, 0.9998299827746883, 0), (0.0009999999310821295, 0.012250000610947609, -0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Middle1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07370000332593918, 0.42500004172325134, 0.39329999685287476, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_21" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (-0.12930904799637277, 0.9913701059044158, 0.021551525858163112, 0), (-0.9913701059044158, -0.12877560008030997, -0.024538602070314885, 0), (-0.021551525858163112, -0.024538602070314885, 0.9994665520839373, 0), (-0.001999999862164259, 0.015300000086426735, 0.0004000000189989805, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_21" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336

                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (-0.12930904799637277, 0.9913701059044158, 0.021551525858163112, 0), (-0.9913701059044158, -0.12877560008030997, -0.024538602070314885, 0), (-0.021551525858163112, -0.024538602070314885, 0.9994665520839373, 0), (-0.001999999862164259, 0.015300000086426735, 0.0004000000189989805, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Middle2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07770000398159027, 0.4556000530719757, 0.39410001039505005, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_22" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (-0.17397246379122056, 0.981203606208453, -0.08350667094102704, 0), (-0.981203606208453, -0.16553041841712712, 0.09919405565437689, 0), (0.08350667094102704, 0.09919405565437689, 0.9915579546259065, 0), (-0.002050000010058284, 0.011749999597668648, -0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_22" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866

                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (-0.17397246379122056, 0.981203606208453, -0.08350667094102704, 0), (-0.981203606208453, -0.16553041841712712, 0.09919405565437689, 0), (0.08350667094102704, 0.09919405565437689, 0.9915579546259065, 0), (-0.002050000010058284, 0.011749999597668648, -0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Middle3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.08180000633001328, 0.4791000485420227, 0.3921000063419342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_23" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013777565, -0.0061, -0.0061), (0.013777565, 0.0061, 0.0061)]
                    double height = 0.015355129726231098
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006099999882280827
                    matrix4d xformOp:transform = ( (-0.08466229670386838, 0.9964097480485918, 0, 0), (-0.9964097480485918, -0.08466229670386838, 0, 0), (0, 0, 1, 0), (-0.0010499999625608325, 0.012750000692903996, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_23" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013777565, -0.0061, -0.0061), (0.013777565, 0.0061, 0.0061)]
                    double height = 0.015355129726231098

                    double radius = 0.006099999882280827
                    matrix4d xformOp:transform = ( (-0.08466229670386838, 0.9964097480485918, 0, 0), (-0.9964097480485918, -0.08466229670386838, 0, 0), (0, 0, 1, 0), (-0.0010499999625608325, 0.012750000692903996, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Pinky1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.11339999735355377, 0.3996000289916992, 0.38510000705718994, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_24" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591096, -0.0067, -0.0067), (0.012591096, 0.0067, 0.0067)]
                    double height = 0.011782190762460232
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.6110920555663171, 0.7893270244884185, -0.059411706998684366, 0), (-0.7893270244884185, -0.602016003741376, 0.12058184056623844, 0), (0.059411706998684366, 0.12058184056623844, 0.9909239481750589, 0), (-0.006000000052154064, 0.007750000339001417, -0.0005499999970197678, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_24" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591096, -0.0067, -0.0067), (0.012591096, 0.0067, 0.0067)]
                    double height = 0.011782190762460232

                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.6110920555663171, 0.7893270244884185, -0.059411706998684366, 0), (-0.7893270244884185, -0.602016003741376, 0.12058184056623844, 0), (0.059411706998684366, 0.12058184056623844, 0.9909239481750589, 0), (-0.006000000052154064, 0.007750000339001417, -0.0005499999970197678, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Pinky2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.12539999186992645, 0.4151000380516052, 0.3840000033378601, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_25" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (-0.5880232706503907, 0.8042082992674153, -0.08647400398360361, 0), (-0.8042082992674153, -0.5698723616581063, 0.1688034666882139, 0), (0.08647400398360361, 0.1688034666882139, 0.9818490910077156, 0), (-0.00559999980032444, 0.007750000339001417, -0.000800000037997961, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_25" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748

                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (-0.5880232706503907, 0.8042082992674153, -0.08647400398360361, 0), (-0.8042082992674153, -0.5698723616581063, 0.1688034666882139, 0), (0.08647400398360361, 0.1688034666882139, 0.9818490910077156, 0), (-0.00559999980032444, 0.007750000339001417, -0.000800000037997961, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Pinky3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.13659998774528503, 0.43060004711151123, 0.3822999894618988, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_26" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010950841, -0.005, -0.005), (0.010950841, 0.005, 0.005)]
                    double height = 0.011901681311428547
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.004999999888241291
                    matrix4d xformOp:transform = ( (-0.47052178517817, 0.8822284409155401, 0.016804349612591363, 0), (-0.8822284409155401, -0.46998845613737217, -0.027999777379394963, 0), (-0.016804349612591363, -0.027999777379394963, 0.9994666709592022, 0), (-0.004600000102072954, 0.008750000037252903, 0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_26" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010950841, -0.005, -0.005), (0.010950841, 0.005, 0.005)]
                    double height = 0.011901681311428547

                    double radius = 0.004999999888241291
                    matrix4d xformOp:transform = ( (-0.47052178517817, 0.8822284409155401, 0.016804349612591363, 0), (-0.8822284409155401, -0.46998845613737217, -0.027999777379394963, 0), (-0.016804349612591363, -0.027999777379394963, 0.9994666709592022, 0), (-0.004600000102072954, 0.008750000037252903, 0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Ring1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.09700000286102295, 0.41300004720687866, 0.3903000056743622, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_27" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (-0.1812092695539964, 0.9820365137931333, 0.052609101677306924, 0), (-0.9820365137931333, -0.1778290201028767, -0.06309798648701559, 0), (-0.052609101677306924, -0.06309798648701559, 0.9966197505488803, 0), (-0.0026499999221414328, 0.0139999995008111, 0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_27" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919

                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (-0.1812092695539964, 0.9820365137931333, 0.052609101677306924, 0), (-0.9820365137931333, -0.1778290201028767, -0.06309798648701559, 0), (-0.052609101677306924, -0.06309798648701559, 0.9966197505488803, 0), (-0.0026499999221414328, 0.0139999995008111, 0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Ring2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.1023000031709671, 0.4410000443458557, 0.39180001616477966, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_28" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (-0.29887795302392917, 0.9522388412402094, -0.06255583738064185, 0), (-0.9522388412402094, -0.29329656746097754, 0.08496108986025153, 0), (0.06255583738064185, 0.08496108986025153, 0.9944186144370483, 0), (-0.0035500000230968, 0.01145000010728836, -0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_28" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103

                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (-0.29887795302392917, 0.9522388412402094, -0.06255583738064185, 0), (-0.9522388412402094, -0.29329656746097754, 0.08496108986025153, 0), (0.06255583738064185, 0.08496108986025153, 0.9944186144370483, 0), (-0.0035500000230968, 0.01145000010728836, -0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Ring3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.10940000414848328, 0.4638000428676605, 0.3903000056743622, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_29" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013311012, -0.0057, -0.0057), (0.013311012, 0.0057, 0.0057)]
                    double height = 0.015222023241221905
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.00570000009611249
                    matrix4d xformOp:transform = ( (-0.20365214400158682, 0.9788448178739344, 0.019708284142700316, 0), (-0.9788448178739344, -0.20316439666084563, -0.0242247855500487, 0), (-0.019708284142700316, -0.0242247855500487, 0.9995122526592588, 0), (-0.0025500000920146704, 0.012450000271201134, 0.00024999998277053237, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_29" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.013311012, -0.0057, -0.0057), (0.013311012, 0.0057, 0.0057)]
                    double height = 0.015222023241221905

                    double radius = 0.00570000009611249
                    matrix4d xformOp:transform = ( (-0.20365214400158682, 0.9788448178739344, 0.019708284142700316, 0), (-0.9788448178739344, -0.20316439666084563, -0.0242247855500487, 0), (-0.019708284142700316, -0.0242247855500487, 0.9995122526592588, 0), (-0.0025500000920146704, 0.012450000271201134, 0.00024999998277053237, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Thumb1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.04410000145435333, 0.35620003938674927, 0.3815999925136566, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_30" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (0.8264744673032338, 0.5620027261387222, 0.03305897991167184, 0), (-0.5620027261387222, 0.8270728310655482, -0.010172185183627058, 0), (-0.03305897991167184, -0.010172185183627058, 0.9994016362376855, 0), (0.01249999925494194, 0.008500000461935997, 0.0004999999655410647, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_30" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642

                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (0.8264744673032338, 0.5620027261387222, 0.03305897991167184, 0), (-0.5620027261387222, 0.8270728310655482, -0.010172185183627058, 0), (-0.03305897991167184, -0.010172185183627058, 0.9994016362376855, 0), (0.01249999925494194, 0.008500000461935997, 0.0004999999655410647, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Thumb2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.019100001081824303, 0.37320002913475037, 0.38259997963905334, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_31" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (0.5912782007161573, 0.7820131603126228, -0.19709274285827671, 0), (-0.7820131603126228, 0.6156897377508059, 0.09685868159174849, 0), (0.19709274285827671, 0.09685868159174849, 0.9755884629653514, 0), (0.007750000339001417, 0.010250000283122063, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_31" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806

                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (0.5912782007161573, 0.7820131603126228, -0.19709274285827671, 0), (-0.7820131603126228, 0.6156897377508059, 0.09685868159174849, 0), (0.19709274285827671, 0.09685868159174849, 0.9755884629653514, 0), (0.007750000339001417, 0.010250000283122063, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Thumb3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.003600001335144043, 0.3937000334262848, 0.3773999810218811, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_32" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017303925, -0.0087, -0.0087), (0.017303925, 0.0087, 0.0087)]
                    double height = 0.01720784790813923
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.008700000122189522
                    matrix4d xformOp:transform = ( (0.610186736318997, 0.784525810657243, -0.11041474193941525, 0), (-0.784525810657243, 0.617758165552452, 0.05379699805366123, 0), (0.11041474193941525, 0.05379699805366123, 0.992428570766545, 0), (0.008750000037252903, 0.011249999515712261, -0.0015499999281018972, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_32" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017303925, -0.0087, -0.0087), (0.017303925, 0.0087, 0.0087)]
                    double height = 0.01720784790813923

                    double radius = 0.008700000122189522
                    matrix4d xformOp:transform = ( (0.610186736318997, 0.784525810657243, -0.11041474193941525, 0), (-0.784525810657243, 0.617758165552452, 0.05379699805366123, 0), (0.11041474193941525, 0.05379699805366123, 0.992428570766545, 0), (0.008750000037252903, 0.011249999515712261, -0.0015499999281018972, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Thorax" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.015399999916553497, -0.40379995107650757, 0.3902999758720398, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_33" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08853826, -0.0536, -0.0536), (0.08853826, 0.0536, 0.0536)]
                    double height = 0.069876529276371
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.053599998354911804
                    matrix4d xformOp:transform = ( (-0.10876345835851708, -0.8815549410838912, 0.4593817128782405, 0), (0.8815549410838912, 0.1280216302665167, 0.4543913242530664, 0), (-0.4593817128782405, 0.4543913242530664, 0.7632149113749662, 0), (-0.006299999542534351, -0.05129999667406082, 0.026750002056360245, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_33" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08853826, -0.0536, -0.0536), (0.08853826, 0.0536, 0.0536)]
                    double height = 0.069876529276371

                    double radius = 0.053599998354911804
                    matrix4d xformOp:transform = ( (-0.10876345835851708, -0.8815549410838912, 0.4593817128782405, 0), (0.8815549410838912, 0.1280216302665167, 0.4543913242530664, 0), (-0.4593817128782405, 0.4543913242530664, 0.7632149113749662, 0), (-0.006299999542534351, -0.05129999667406082, 0.026750002056360245, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Shoulder" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smplx_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.028099998831748962, -0.506399929523468, 0.4437999725341797, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_34" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13456774, -0.0521, -0.0521), (0.13456774, 0.0521, 0.0521)]
                    double height = 0.16493546962738037
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05209999904036522
                    matrix4d xformOp:transform = ( (-0.09640145115940912, -0.9864464482218054, -0.13277921868906795, 0), (0.9864464482218054, -0.07689022223616604, -0.14495327402736358, 0), (0.13277921868906795, -0.14495327402736358, 0.9804887710767569, 0), (-0.013249999843537807, -0.13555000722408295, -0.0182499997317791, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_34" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13456774, -0.0521, -0.0521), (0.13456774, 0.0521, 0.0521)]
                    double height = 0.16493546962738037

                    double radius = 0.05209999904036522
                    matrix4d xformOp:transform = ( (-0.09640145115940912, -0.9864464482218054, -0.13277921868906795, 0), (0.9864464482218054, -0.07689022223616604, -0.14495327402736358, 0), (0.13277921868906795, -0.14495327402736358, 0.9804887710767569, 0), (-0.013249999843537807, -0.13555000722408295, -0.0182499997317791, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Elbow" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.05460000038146973, -0.7774999141693115, 0.4072999656200409, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_35" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11530357, -0.0404, -0.0404), (0.11530357, 0.0404, 0.0404)]
                    double height = 0.1498071402311325
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04039999842643738
                    matrix4d xformOp:transform = ( (-0.0614124996001022, -0.997949832801055, -0.018023173525193226, 0), (0.997949832801055, -0.06106641069629859, -0.01916307154244068, 0), (0.018023173525193226, -0.01916307154244068, 0.9996539110961964, 0), (-0.007699999958276749, -0.12464999407529831, -0.0022499999031424522, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_35" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11530357, -0.0404, -0.0404), (0.11530357, 0.0404, 0.0404)]
                    double height = 0.1498071402311325

                    double radius = 0.04039999842643738
                    matrix4d xformOp:transform = ( (-0.0614124996001022, -0.997949832801055, -0.018023173525193226, 0), (0.997949832801055, -0.06106641069629859, -0.01916307154244068, 0), (0.018023173525193226, -0.01916307154244068, 0.9996539110961964, 0), (-0.007699999958276749, -0.12464999407529831, -0.0022499999031424522, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Wrist" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.06989999860525131, -1.0267999172210693, 0.40279996395111084, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_36" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.04, -0.0402, -0.0159), (0.04, 0.0402, 0.0159)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.03999999910593033, 0, 0, 0), (0, 0.04019999876618385, 0, 0), (0, 0, 0.01590000092983246, 0), (-0.002899999963119626, -0.053700000047683716, -0.004399999976158142, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_36" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.04, -0.0402, -0.0159), (0.04, 0.0402, 0.0159)]

                    matrix4d xformOp:transform = ( (0.03999999910593033, 0, 0, 0), (0, 0.04019999876618385, 0, 0), (0, 0, 0.01590000092983246, 0), (-0.002899999963119626, -0.053700000047683716, -0.004399999976158142, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Index1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0502999983727932, -1.1266999244689941, 0.390999972820282, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_37" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (0.093095667266752, -0.9930208180783282, 0.07240776706685637, 0), (0.9930208180783282, 0.09789203112892864, 0.06577870522954044, 0), (-0.07240776706685637, 0.06577870522954044, 0.9952036361378234, 0), (0.001500000013038516, -0.01599999889731407, 0.0010999999940395355, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_37" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018767472, -0.0091, -0.0091), (0.018767472, 0.0091, 0.0091)]
                    double height = 0.01933494210243225

                    double radius = 0.009100000374019146
                    matrix4d xformOp:transform = ( (0.093095667266752, -0.9930208180783282, 0.07240776706685637, 0), (0.9930208180783282, 0.09789203112892864, 0.06577870522954044, 0), (-0.07240776706685637, 0.06577870522954044, 0.9952036361378234, 0), (0.001500000013038516, -0.01599999889731407, 0.0010999999940395355, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Index2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.04729999974370003, -1.1585999727249146, 0.39319998025894165, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_38" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (9.65033349897837e-8, -0.9946656921278176, -0.10315052191829199, 0), (0.9946656921278176, 0.010640127039543756, -0.1026002887890618, 0), (0.10315052191829199, -0.1026002887890618, 0.9893599694637912, 0), (0, -0.011249999515712261, -0.0012000000569969416, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_38" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014386199, -0.0076, -0.0076), (0.014386199, 0.0076, 0.0076)]
                    double height = 0.013572397641837597

                    double radius = 0.007600000128149986
                    matrix4d xformOp:transform = ( (9.65033349897837e-8, -0.9946656921278176, -0.10315052191829199, 0), (0.9946656921278176, 0.010640127039543756, -0.1026002887890618, 0), (0.10315052191829199, -0.1026002887890618, 0.9893599694637912, 0), (0, -0.011249999515712261, -0.0012000000569969416, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Index3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.047199998050928116, -1.1811000108718872, 0.39089998602867126, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_39" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012880008, -0.0067, -0.0067), (0.012880008, 0.0067, 0.0067)]
                    double height = 0.012360015884041786
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (0.09708708583934211, -0.9951444086142942, -0.016181211073827306, 0), (0.9951444086142942, 0.0973257465267281, -0.014677631206006958, 0), (0.016181211073827306, -0.014677631206006958, 0.999761339312614, 0), (0.0009999999310821295, -0.010250000283122063, -0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_39" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012880008, -0.0067, -0.0067), (0.012880008, 0.0067, 0.0067)]
                    double height = 0.012360015884041786

                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (0.09708708583934211, -0.9951444086142942, -0.016181211073827306, 0), (0.9951444086142942, 0.0973257465267281, -0.014677631206006958, 0), (0.016181211073827306, -0.014677631206006958, 0.999761339312614, 0), (0.0009999999310821295, -0.010250000283122063, -0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Middle1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07360000163316727, -1.134199857711792, 0.3933999538421631, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_40" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (-0.12930904799637277, -0.9913701059044158, 0.021551525858163112, 0), (0.9913701059044158, -0.12877560008030997, 0.024538602070314885, 0), (-0.021551525858163112, 0.024538602070314885, 0.9994665520839373, 0), (-0.001999999862164259, -0.015300000086426735, 0.0004000000189989805, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_40" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.018680084, -0.0094, -0.0094), (0.018680084, 0.0094, 0.0094)]
                    double height = 0.018560171127319336

                    double radius = 0.009399999864399433
                    matrix4d xformOp:transform = ( (-0.12930904799637277, -0.9913701059044158, 0.021551525858163112, 0), (0.9913701059044158, -0.12877560008030997, 0.024538602070314885, 0), (-0.021551525858163112, 0.024538602070314885, 0.9994665520839373, 0), (-0.001999999862164259, -0.015300000086426735, 0.0004000000189989805, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Middle2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07760000228881836, -1.1647998094558716, 0.3941999673843384, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_41" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (-0.17397246379122056, -0.981203606208453, -0.08350667094102704, 0), (0.981203606208453, -0.16553041841712712, -0.09919405565437689, 0), (0.08350667094102704, -0.09919405565437689, 0.9915579546259065, 0), (-0.002050000010058284, -0.011749999597668648, -0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_41" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014185054, -0.007, -0.007), (0.014185054, 0.007, 0.007)]
                    double height = 0.014370108023285866

                    double radius = 0.007000000216066837
                    matrix4d xformOp:transform = ( (-0.17397246379122056, -0.981203606208453, -0.08350667094102704, 0), (0.981203606208453, -0.16553041841712712, -0.09919405565437689, 0), (0.08350667094102704, -0.09919405565437689, 0.9915579546259065, 0), (-0.002050000010058284, -0.011749999597668648, -0.0009999999310821295, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Middle3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.08170000463724136, -1.1882997751235962, 0.39219996333122253, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_42" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012882669, -0.0064, -0.0064), (0.012882669, 0.0064, 0.0064)]
                    double height = 0.012965339235961437
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (-0.10026729269623047, -0.9949605136352773, 0, 0), (0.9949605136352773, -0.10026729269623047, 0, 0), (0, 0, 1, 0), (-0.0010499999625608325, -0.01075000036507845, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_42" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012882669, -0.0064, -0.0064), (0.012882669, 0.0064, 0.0064)]
                    double height = 0.012965339235961437

                    double radius = 0.006399999838322401
                    matrix4d xformOp:transform = ( (-0.10026729269623047, -0.9949605136352773, 0, 0), (0.9949605136352773, -0.10026729269623047, 0, 0), (0, 0, 1, 0), (-0.0010499999625608325, -0.01075000036507845, 0, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Pinky1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.11339999735355377, -1.108799934387207, 0.38519996404647827, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_43" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591096, -0.0067, -0.0067), (0.012591096, 0.0067, 0.0067)]
                    double height = 0.011782190762460232
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.6110920555663171, -0.7893270244884185, -0.059411706998684366, 0), (0.7893270244884185, -0.602016003741376, -0.12058184056623844, 0), (0.059411706998684366, -0.12058184056623844, 0.9909239481750589, 0), (-0.006000000052154064, -0.007750000339001417, -0.0005499999970197678, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_43" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012591096, -0.0067, -0.0067), (0.012591096, 0.0067, 0.0067)]
                    double height = 0.011782190762460232

                    double radius = 0.0066999997943639755
                    matrix4d xformOp:transform = ( (-0.6110920555663171, -0.7893270244884185, -0.059411706998684366, 0), (0.7893270244884185, -0.602016003741376, -0.12058184056623844, 0), (0.059411706998684366, -0.12058184056623844, 0.9909239481750589, 0), (-0.006000000052154064, -0.007750000339001417, -0.0005499999970197678, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Pinky2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.12539999186992645, -1.1242998838424683, 0.38409996032714844, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_44" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (-0.5880232706503907, -0.8042082992674153, -0.08647400398360361, 0), (0.8042082992674153, -0.5698723616581063, -0.1688034666882139, 0), (0.08647400398360361, -0.1688034666882139, 0.9818490910077156, 0), (-0.00559999980032444, -0.007750000339001417, -0.000800000037997961, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_44" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012282085, -0.0065, -0.0065), (0.012282085, 0.0065, 0.0065)]
                    double height = 0.011564168147742748

                    double radius = 0.006500000134110451
                    matrix4d xformOp:transform = ( (-0.5880232706503907, -0.8042082992674153, -0.08647400398360361, 0), (0.8042082992674153, -0.5698723616581063, -0.1688034666882139, 0), (0.08647400398360361, -0.1688034666882139, 0.9818490910077156, 0), (-0.00559999980032444, -0.007750000339001417, -0.000800000037997961, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Pinky3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.13659998774528503, -1.1397998332977295, 0.38239994645118713, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_45" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010124683, -0.0052, -0.0052), (0.010124683, 0.0052, 0.0052)]
                    double height = 0.009849365800619125
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.005200000014156103
                    matrix4d xformOp:transform = ( (-0.5685647084494005, -0.8223880616830002, 0.020305878301215996, 0), (0.8223880616830002, -0.5676089949720335, 0.03870639538547138, 0), (-0.020305878301215996, 0.03870639538547138, 0.999044286522633, 0), (-0.004600000102072954, -0.006750000175088644, 0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_45" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.010124683, -0.0052, -0.0052), (0.010124683, 0.0052, 0.0052)]
                    double height = 0.009849365800619125

                    double radius = 0.005200000014156103
                    matrix4d xformOp:transform = ( (-0.5685647084494005, -0.8223880616830002, 0.020305878301215996, 0), (0.8223880616830002, -0.5676089949720335, 0.03870639538547138, 0), (-0.020305878301215996, 0.03870639538547138, 0.999044286522633, 0), (-0.004600000102072954, -0.006750000175088644, 0.00020000000949949026, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Ring1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.09700000286102295, -1.1221998929977417, 0.3903999626636505, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_46" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (-0.1812092695539964, -0.9820365137931333, 0.052609101677306924, 0), (0.9820365137931333, -0.1778290201028767, 0.06309798648701559, 0), (-0.052609101677306924, 0.06309798648701559, 0.9966197505488803, 0), (-0.0026499999221414328, -0.0139999995008111, 0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_46" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.016553655, -0.008, -0.008), (0.016553655, 0.008, 0.008)]
                    double height = 0.01710730791091919

                    double radius = 0.00800000037997961
                    matrix4d xformOp:transform = ( (-0.1812092695539964, -0.9820365137931333, 0.052609101677306924, 0), (0.9820365137931333, -0.1778290201028767, 0.06309798648701559, 0), (-0.052609101677306924, 0.06309798648701559, 0.9966197505488803, 0), (-0.0026499999221414328, -0.0139999995008111, 0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Ring2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.1023000031709671, -1.1501998901367188, 0.391899973154068, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_47" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (-0.29887795302392917, -0.9522388412402094, -0.06255583738064185, 0), (0.9522388412402094, -0.29329656746097754, -0.08496108986025153, 0), (0.06255583738064185, -0.08496108986025153, 0.9944186144370483, 0), (-0.0035500000230968, -0.01145000010728836, -0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_47" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.014593573, -0.0074, -0.0074), (0.014593573, 0.0074, 0.0074)]
                    double height = 0.01438714750111103

                    double radius = 0.007400000002235174
                    matrix4d xformOp:transform = ( (-0.29887795302392917, -0.9522388412402094, -0.06255583738064185, 0), (0.9522388412402094, -0.29329656746097754, -0.08496108986025153, 0), (0.06255583738064185, -0.08496108986025153, 0.9944186144370483, 0), (-0.0035500000230968, -0.01145000010728836, -0.000750000006519258, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Ring3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.10940000414848328, -1.1729998588562012, 0.3903999626636505, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_48" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012441078, -0.006, -0.006), (0.012441078, 0.006, 0.006)]
                    double height = 0.012882157228887081
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.006000000052154064
                    matrix4d xformOp:transform = ( (-0.24064303335388448, -0.9703343314919977, 0.023288024525079942, 0), (0.9703343314919977, -0.23992883431040468, 0.029758292750886373, 0), (-0.023288024525079942, 0.029758292750886373, 0.9992858009565202, 0), (-0.0025500000920146704, -0.010449999943375587, 0.00024999998277053237, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_48" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.012441078, -0.006, -0.006), (0.012441078, 0.006, 0.006)]
                    double height = 0.012882157228887081

                    double radius = 0.006000000052154064
                    matrix4d xformOp:transform = ( (-0.24064303335388448, -0.9703343314919977, 0.023288024525079942, 0), (0.9703343314919977, -0.23992883431040468, 0.029758292750886373, 0), (-0.023288024525079942, 0.029758292750886373, 0.9992858009565202, 0), (-0.0025500000920146704, -0.010449999943375587, 0.00024999998277053237, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Thumb1" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.04399999976158142, -1.0653998851776123, 0.38169997930526733, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_49" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (0.8264744673032338, -0.5620027261387222, 0.03305897991167184, 0), (0.5620027261387222, 0.8270728310655482, 0.010172185183627058, 0), (-0.03305897991167184, 0.010172185183627058, 0.9994016362376855, 0), (0.01249999925494194, -0.008500000461935997, 0.0004999999655410647, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_49" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.02107469, -0.012, -0.012), (0.02107469, 0.012, 0.012)]
                    double height = 0.018149379640817642

                    double radius = 0.012000000104308128
                    matrix4d xformOp:transform = ( (0.8264744673032338, -0.5620027261387222, 0.03305897991167184, 0), (0.5620027261387222, 0.8270728310655482, 0.010172185183627058, 0), (-0.03305897991167184, 0.010172185183627058, 0.9994016362376855, 0), (0.01249999925494194, -0.008500000461935997, 0.0004999999655410647, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Thumb2" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.01899999938905239, -1.082399845123291, 0.38269996643066406, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_50" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (0.5912782007161573, -0.7820131603126228, -0.19709274285827671, 0), (0.7820131603126228, 0.6156897377508059, -0.09685868159174849, 0), (0.19709274285827671, -0.09685868159174849, 0.9755884629653514, 0), (0.007750000339001417, -0.010250000283122063, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_50" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.017364318, -0.0095, -0.0095), (0.017364318, 0.0095, 0.0095)]
                    double height = 0.01572863571345806

                    double radius = 0.009499999694526196
                    matrix4d xformOp:transform = ( (0.5912782007161573, -0.7820131603126228, -0.19709274285827671, 0), (0.7820131603126228, 0.6156897377508059, -0.09685868159174849, 0), (0.19709274285827671, -0.09685868159174849, 0.9755884629653514, 0), (0.007750000339001417, -0.010250000283122063, -0.0025500000920146704, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Thumb3" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0034999996423721313, -1.1028997898101807, 0.3774999678134918, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_51" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.01669854, -0.009, -0.009), (0.01669854, 0.009, 0.009)]
                    double height = 0.015397078357636929
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.008999999612569809
                    matrix4d xformOp:transform = ( (0.6819476275082222, -0.7209159926739943, -0.12340004253787651, 0), (0.7209159926739943, 0.6910011616898544, -0.052891696368385865, 0), (0.12340004253787651, -0.052891696368385865, 0.9909464658183679, 0), (0.008750000037252903, -0.00925000011920929, -0.0015499999281018972, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_51" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.01669854, -0.009, -0.009), (0.01669854, 0.009, 0.009)]
                    double height = 0.015397078357636929

                    double radius = 0.008999999612569809
                    matrix4d xformOp:transform = ( (0.6819476275082222, -0.7209159926739943, -0.12340004253787651, 0), (0.7209159926739943, 0.6910011616898544, -0.052891696368385865, 0), (0.12340004253787651, -0.052891696368385865, 0.9909464658183679, 0), (0.008750000037252903, -0.00925000011920929, -0.0015499999281018972, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }
    }

    def "joints"
    {
        def PhysicsJoint "L_Hip" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Hip_x"
            custom token mjcf:rotY:name = "L_Hip_y"
            custom token mjcf:rotZ:name = "L_Hip_z"
            rel physics:body0 = </smplx_humanoid/bodies/Pelvis>
            rel physics:body1 = </smplx_humanoid/bodies/L_Hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.026, 0.0582, -0.0928)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Knee" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Knee_x"
            custom token mjcf:rotY:name = "L_Knee_y"
            custom token mjcf:rotZ:name = "L_Knee_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Hip>
            rel physics:body1 = </smplx_humanoid/bodies/L_Knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.009399999, 0.054700002, -0.3788)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Ankle" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ankle_x"
            custom token mjcf:rotY:name = "L_Ankle_y"
            custom token mjcf:rotZ:name = "L_Ankle_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Knee>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ankle>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0319, -0.04349999, -0.40309998)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Toe" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Toe_x"
            custom token mjcf:rotY:name = "L_Toe_y"
            custom token mjcf:rotZ:name = "L_Toe_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Ankle>
            rel physics:body1 = </smplx_humanoid/bodies/L_Toe>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.1182, 0.047299996, -0.05799997)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Hip" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Hip_x"
            custom token mjcf:rotY:name = "R_Hip_y"
            custom token mjcf:rotZ:name = "R_Hip_z"
            rel physics:body0 = </smplx_humanoid/bodies/Pelvis>
            rel physics:body1 = </smplx_humanoid/bodies/R_Hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0213, -0.063299984, -0.1039)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Knee" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Knee_x"
            custom token mjcf:rotY:name = "R_Knee_y"
            custom token mjcf:rotZ:name = "R_Knee_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Hip>
            rel physics:body1 = </smplx_humanoid/bodies/R_Knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.016799998, -0.044200003, -0.3624)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Ankle" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ankle_x"
            custom token mjcf:rotY:name = "R_Ankle_y"
            custom token mjcf:rotZ:name = "R_Ankle_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Knee>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ankle>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0202, 0.0153999925, -0.41070002)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Toe" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Toe_x"
            custom token mjcf:rotY:name = "R_Toe_y"
            custom token mjcf:rotZ:name = "R_Toe_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Ankle>
            rel physics:body1 = </smplx_humanoid/bodies/R_Toe>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.119, -0.0388, -0.05830002)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "Torso" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Torso_x"
            custom token mjcf:rotY:name = "Torso_y"
            custom token mjcf:rotZ:name = "Torso_z"
            rel physics:body0 = </smplx_humanoid/bodies/Pelvis>
            rel physics:body1 = </smplx_humanoid/bodies/Torso>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0276, -0.0027999878, 0.1099)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Spine" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Spine_x"
            custom token mjcf:rotY:name = "Spine_y"
            custom token mjcf:rotZ:name = "Spine_z"
            rel physics:body0 = </smplx_humanoid/bodies/Torso>
            rel physics:body1 = </smplx_humanoid/bodies/Spine>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.005900001, 0.00940001, 0.13190001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Chest" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Chest_x"
            custom token mjcf:rotY:name = "Chest_y"
            custom token mjcf:rotZ:name = "Chest_z"
            rel physics:body0 = </smplx_humanoid/bodies/Spine>
            rel physics:body1 = </smplx_humanoid/bodies/Chest>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0284, -0.011299998, 0.05219999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Neck" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Neck_x"
            custom token mjcf:rotY:name = "Neck_y"
            custom token mjcf:rotZ:name = "Neck_z"
            rel physics:body0 = </smplx_humanoid/bodies/Chest>
            rel physics:body1 = </smplx_humanoid/bodies/Neck>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0316, -0.012199998, 0.1652)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "Head" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Head_x"
            custom token mjcf:rotY:name = "Head_y"
            custom token mjcf:rotZ:name = "Head_z"
            rel physics:body0 = </smplx_humanoid/bodies/Neck>
            rel physics:body1 = </smplx_humanoid/bodies/Head>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0207, 0.024800003, 0.16049999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Thorax" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thorax_x"
            custom token mjcf:rotY:name = "L_Thorax_y"
            custom token mjcf:rotZ:name = "L_Thorax_z"
            rel physics:body0 = </smplx_humanoid/bodies/Chest>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thorax>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0072, 0.04640001, 0.08489999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Shoulder" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Shoulder_x"
            custom token mjcf:rotY:name = "L_Shoulder_y"
            custom token mjcf:rotZ:name = "L_Shoulder_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Thorax>
            rel physics:body1 = </smplx_humanoid/bodies/L_Shoulder>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.015500001, 0.11919999, 0.05770001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Elbow" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Elbow_x"
            custom token mjcf:rotY:name = "L_Elbow_y"
            custom token mjcf:rotZ:name = "L_Elbow_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Shoulder>
            rel physics:body1 = </smplx_humanoid/bodies/L_Elbow>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.042500004, 0.2541, -0.0722)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Wrist" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Wrist_x"
            custom token mjcf:rotY:name = "L_Wrist_y"
            custom token mjcf:rotZ:name = "L_Wrist_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Elbow>
            rel physics:body1 = </smplx_humanoid/bodies/L_Wrist>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0024999976, 0.252, 0.023200005)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }

        def PhysicsJoint "L_Index1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 20
            float limit:rotX:physics:low = -90
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Index1_x"
            custom token mjcf:rotY:name = "L_Index1_y"
            custom token mjcf:rotZ:name = "L_Index1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Index1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0194, 0.10189998, -0.008700013)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Index2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -100
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Index2_x"
            custom token mjcf:rotY:name = "L_Index2_y"
            custom token mjcf:rotZ:name = "L_Index2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Index1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Index2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0029999986, 0.03189999, 0.0022000074)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Index3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -80
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Index3_x"
            custom token mjcf:rotY:name = "L_Index3_y"
            custom token mjcf:rotZ:name = "L_Index3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Index2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Index3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.00010000169, 0.022500008, -0.0024000108)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Middle1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 20
            float limit:rotX:physics:low = -90
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Middle1_x"
            custom token mjcf:rotY:name = "L_Middle1_y"
            custom token mjcf:rotZ:name = "L_Middle1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Middle1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0040000007, 0.109400004, -0.0063000023)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Middle2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -100
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Middle2_x"
            custom token mjcf:rotY:name = "L_Middle2_y"
            custom token mjcf:rotZ:name = "L_Middle2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Middle1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Middle2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0040000007, 0.030600011, 0.00080001354)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Middle3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -80
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Middle3_x"
            custom token mjcf:rotY:name = "L_Middle3_y"
            custom token mjcf:rotZ:name = "L_Middle3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Middle2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Middle3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0041000023, 0.023499995, -0.002000004)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Pinky1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 20
            float limit:rotX:physics:low = -90
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Pinky1_x"
            custom token mjcf:rotY:name = "L_Pinky1_y"
            custom token mjcf:rotZ:name = "L_Pinky1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Pinky1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.043699995, 0.08399999, -0.014499992)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Pinky2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -100
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Pinky2_x"
            custom token mjcf:rotY:name = "L_Pinky2_y"
            custom token mjcf:rotZ:name = "L_Pinky2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Pinky1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Pinky2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0119999945, 0.015500009, -0.0011000037)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Pinky3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -80
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Pinky3_x"
            custom token mjcf:rotY:name = "L_Pinky3_y"
            custom token mjcf:rotZ:name = "L_Pinky3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Pinky2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Pinky3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.011199996, 0.015500009, -0.0017000139)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Ring1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 20
            float limit:rotX:physics:low = -90
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ring1_x"
            custom token mjcf:rotY:name = "L_Ring1_y"
            custom token mjcf:rotZ:name = "L_Ring1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ring1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0273, 0.09740001, -0.0092999935)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Ring2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -100
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ring2_x"
            custom token mjcf:rotY:name = "L_Ring2_y"
            custom token mjcf:rotZ:name = "L_Ring2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Ring1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ring2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0053000003, 0.027999997, 0.0015000105)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Ring3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0
            float limit:rotX:physics:low = -80
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ring3_x"
            custom token mjcf:rotY:name = "L_Ring3_y"
            custom token mjcf:rotZ:name = "L_Ring3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Ring2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Ring3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.007100001, 0.022799999, -0.0015000105)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Thumb1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 45
            float limit:rotX:physics:low = -45
            float limit:rotY:physics:high = 130
            float limit:rotY:physics:low = -45
            float limit:rotZ:physics:high = 70
            float limit:rotZ:physics:low = -30
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thumb1_x"
            custom token mjcf:rotY:name = "L_Thumb1_y"
            custom token mjcf:rotZ:name = "L_Thumb1_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thumb1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.025600001, 0.0406, -0.018000007)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Thumb2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0.1
            float limit:rotX:physics:low = -0.1
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 55
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thumb2_x"
            custom token mjcf:rotY:name = "L_Thumb2_y"
            custom token mjcf:rotZ:name = "L_Thumb2_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Thumb1>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thumb2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.025, 0.01699999, 0.0009999871)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "L_Thumb3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0.1
            float limit:rotX:physics:low = -0.1
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 80
            float limit:rotZ:physics:low = -15
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thumb3_x"
            custom token mjcf:rotY:name = "L_Thumb3_y"
            custom token mjcf:rotZ:name = "L_Thumb3_z"
            rel physics:body0 = </smplx_humanoid/bodies/L_Thumb2>
            rel physics:body1 = </smplx_humanoid/bodies/L_Thumb3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0155, 0.020500004, -0.0051999986)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thorax" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thorax_x"
            custom token mjcf:rotY:name = "R_Thorax_y"
            custom token mjcf:rotZ:name = "R_Thorax_z"
            rel physics:body0 = </smplx_humanoid/bodies/Chest>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thorax>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0134, -0.047699988, 0.08429998)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Shoulder" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Shoulder_x"
            custom token mjcf:rotY:name = "R_Shoulder_y"
            custom token mjcf:rotZ:name = "R_Shoulder_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Thorax>
            rel physics:body1 = </smplx_humanoid/bodies/R_Shoulder>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.012699999, -0.10259998, 0.053499997)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Elbow" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Elbow_x"
            custom token mjcf:rotY:name = "R_Elbow_y"
            custom token mjcf:rotZ:name = "R_Elbow_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Shoulder>
            rel physics:body1 = </smplx_humanoid/bodies/R_Elbow>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.026500002, -0.27109998, -0.036500007)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Wrist" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Wrist_x"
            custom token mjcf:rotY:name = "R_Wrist_y"
            custom token mjcf:rotZ:name = "R_Wrist_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Elbow>
            rel physics:body1 = </smplx_humanoid/bodies/R_Wrist>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.015299998, -0.2493, -0.0045000017)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }

        def PhysicsJoint "R_Index1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 90
            float limit:rotX:physics:low = -20
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Index1_x"
            custom token mjcf:rotY:name = "R_Index1_y"
            custom token mjcf:rotZ:name = "R_Index1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Index1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0196, -0.09990001, -0.011799991)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Index2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 100
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Index2_x"
            custom token mjcf:rotY:name = "R_Index2_y"
            custom token mjcf:rotZ:name = "R_Index2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Index1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Index2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0029999986, -0.03190005, 0.0022000074)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Index3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 80
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Index3_x"
            custom token mjcf:rotY:name = "R_Index3_y"
            custom token mjcf:rotZ:name = "R_Index3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Index2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Index3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.00010000169, -0.022500038, -0.0022999942)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Middle1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 90
            float limit:rotX:physics:low = -20
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Middle1_x"
            custom token mjcf:rotY:name = "R_Middle1_y"
            custom token mjcf:rotZ:name = "R_Middle1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Middle1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.003700003, -0.10739994, -0.00940001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Middle2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 100
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Middle2_x"
            custom token mjcf:rotY:name = "R_Middle2_y"
            custom token mjcf:rotZ:name = "R_Middle2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Middle1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Middle2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0040000007, -0.030599952, 0.00080001354)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Middle3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 80
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Middle3_x"
            custom token mjcf:rotY:name = "R_Middle3_y"
            custom token mjcf:rotZ:name = "R_Middle3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Middle2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Middle3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0041000023, -0.023499966, -0.002000004)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Pinky1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 90
            float limit:rotX:physics:low = -20
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Pinky1_x"
            custom token mjcf:rotY:name = "R_Pinky1_y"
            custom token mjcf:rotZ:name = "R_Pinky1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Pinky1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0435, -0.08200002, -0.0176)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Pinky2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 100
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Pinky2_x"
            custom token mjcf:rotY:name = "R_Pinky2_y"
            custom token mjcf:rotZ:name = "R_Pinky2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Pinky1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Pinky2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0119999945, -0.015499949, -0.0011000037)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Pinky3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 80
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Pinky3_x"
            custom token mjcf:rotY:name = "R_Pinky3_y"
            custom token mjcf:rotZ:name = "R_Pinky3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Pinky2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Pinky3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.011199996, -0.015499949, -0.0017000139)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Ring1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 90
            float limit:rotX:physics:low = -20
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -20
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ring1_x"
            custom token mjcf:rotY:name = "R_Ring1_y"
            custom token mjcf:rotZ:name = "R_Ring1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ring1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.027100004, -0.095399976, -0.012400001)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Ring2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 100
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ring2_x"
            custom token mjcf:rotY:name = "R_Ring2_y"
            custom token mjcf:rotZ:name = "R_Ring2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Ring1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ring2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0053000003, -0.027999997, 0.0015000105)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Ring3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 80
            float limit:rotX:physics:low = 0
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 0.1
            float limit:rotZ:physics:low = -0.1
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ring3_x"
            custom token mjcf:rotY:name = "R_Ring3_y"
            custom token mjcf:rotZ:name = "R_Ring3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Ring2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Ring3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.007100001, -0.022799969, -0.0015000105)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thumb1" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 45
            float limit:rotX:physics:low = -45
            float limit:rotY:physics:high = 130
            float limit:rotY:physics:low = -45
            float limit:rotZ:physics:high = 30
            float limit:rotZ:physics:low = -70
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thumb1_x"
            custom token mjcf:rotY:name = "R_Thumb1_y"
            custom token mjcf:rotZ:name = "R_Thumb1_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thumb1>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.025899999, -0.038599968, -0.021099985)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thumb2" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0.1
            float limit:rotX:physics:low = -0.1
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 20
            float limit:rotZ:physics:low = -55
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thumb2_x"
            custom token mjcf:rotY:name = "R_Thumb2_y"
            custom token mjcf:rotZ:name = "R_Thumb2_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Thumb1>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thumb2>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.025, -0.01699996, 0.0009999871)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }

        def PhysicsJoint "R_Thumb3" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 10
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 100
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 10
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 100
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 10
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 100
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 0.1
            float limit:rotX:physics:low = -0.1
            float limit:rotY:physics:high = 0.1
            float limit:rotY:physics:low = -0.1
            float limit:rotZ:physics:high = 15
            float limit:rotZ:physics:low = -80
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thumb3_x"
            custom token mjcf:rotY:name = "R_Thumb3_y"
            custom token mjcf:rotZ:name = "R_Thumb3_z"
            rel physics:body0 = </smplx_humanoid/bodies/R_Thumb2>
            rel physics:body1 = </smplx_humanoid/bodies/R_Thumb3>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0155, -0.020499945, -0.0051999986)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 10
            float physxLimit:rotX:stiffness = 100
            float physxLimit:rotY:damping = 10
            float physxLimit:rotY:stiffness = 100
            float physxLimit:rotZ:damping = 10
            float physxLimit:rotZ:stiffness = 100
        }
    }
}
