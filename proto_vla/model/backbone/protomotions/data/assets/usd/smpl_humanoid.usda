#usda 1.0
(
    defaultPrim = "smpl_humanoid"
    upAxis = "Z"
)

def Xform "smpl_humanoid" (
    delete apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    def Xform "bodies"
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Pelvis" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI", "PhysicsArticulationRootAPI", "PhysxArticulationAPI", "AnimationDataAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0017999999690800905, -0.2232999950647354, 0.028200000524520874, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_0" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.083, -0.1069, -0.0722), (0.083, 0.1069, 0.0722)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.08299999684095383, 0, 0, 0), (0, 0.10689999908208847, 0, 0), (0, 0, 0.0722000002861023, 0), (-0.005499999970197678, 0, -0.01209999993443489, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_0" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.083, -0.1069, -0.0722), (0.083, 0.1069, 0.0722)]
                    matrix4d xformOp:transform = ( (0.08299999684095383, 0, 0, 0), (0, 0.10689999908208847, 0, 0), (0, 0, 0.0722000002861023, 0), (-0.005499999970197678, 0, -0.01209999993443489, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Hip" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.00860000029206276, -0.15379999577999115, -0.06319999694824219, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_1" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17457362, -0.0615, -0.0615), (0.17457362, 0.0615, 0.0615)]
                    double height = 0.22614723443984985
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.061500001698732376
                    matrix4d xformOp:transform = ( (-0.011939160190055809, 0.09064890978710949, -0.995811366106409, 0), (-0.09064890978710949, 0.9916834833012701, 0.09135997194515255, 0), (0.995811366106409, 0.09135997194515255, -0.0036226434913260164, 0), (-0.0022499999031424522, 0.017149999737739563, -0.18759998679161072, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_1" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17457362, -0.0615, -0.0615), (0.17457362, 0.0615, 0.0615)]
                    double height = 0.22614723443984985
                    
                    double radius = 0.061500001698732376
                    matrix4d xformOp:transform = ( (-0.011939160190055809, 0.09064890978710949, -0.995811366106409, 0), (-0.09064890978710949, 0.9916834833012701, 0.09135997194515255, 0), (0.995811366106409, 0.09135997194515255, -0.0036226434913260164, 0), (-0.0022499999031424522, 0.017149999737739563, -0.18759998679161072, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Knee" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smpl_humanoid/bodies/L_Toe>,
                </smpl_humanoid/bodies/R_Ankle>,
                </smpl_humanoid/bodies/R_Toe>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.013100000098347664, -0.11949999630451202, -0.438400000333786, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_2" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.1742919, -0.0541, -0.0541), (0.1742919, 0.0541, 0.0541)]
                    double height = 0.2403837889432907
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.054099999368190765
                    matrix4d xformOp:transform = ( (-0.10940859099234901, -0.03411211673751424, -0.9934114568606276, 0), (0.03411211673751424, 0.9986934117460851, -0.038050401586811944, 0), (0.9934114568606276, -0.038050401586811944, -0.10810200273843407, 0), (-0.02185000106692314, -0.006800000090152025, -0.19900000095367432, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_2" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.1742919, -0.0541, -0.0541), (0.1742919, 0.0541, 0.0541)]
                    double height = 0.2403837889432907
                    
                    double radius = 0.054099999368190765
                    matrix4d xformOp:transform = ( (-0.10940859099234901, -0.03411211673751424, -0.9934114568606276, 0), (0.03411211673751424, 0.9986934117460851, -0.038050401586811944, 0), (0.9934114568606276, -0.038050401586811944, -0.10810200273843407, 0), (-0.02185000106692314, -0.006800000090152025, -0.19900000095367432, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Ankle" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smpl_humanoid/bodies/R_Knee>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0568000003695488, -0.1331000030040741, -0.836400032043457, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_3" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.085, -0.0483, -0.0464), (0.085, 0.0483, 0.0464)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.08500000089406967, 0, 0, 0), (0, 0.04830000177025795, 0, 0), (0, 0, 0.04639999940991402, 0), (0.02419999986886978, 0.02329999953508377, -0.023900000378489494, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_3" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.085, -0.0483, -0.0464), (0.085, 0.0483, 0.0464)]
                    
                    matrix4d xformOp:transform = ( (0.08500000089406967, 0, 0, 0), (0, 0.04830000177025795, 0, 0), (0, 0, 0.04639999940991402, 0), (0.02419999986886978, 0.02329999953508377, -0.023900000378489494, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Toe" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smpl_humanoid/bodies/L_Knee>,
                </smpl_humanoid/bodies/R_Knee>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.0625, -0.10670000314712524, -0.8922000527381897, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_4" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0496, -0.0478, -0.02), (0.0496, 0.0478, 0.02)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.04960000142455101, 0, 0, 0), (0, 0.04780000075697899, 0, 0), (0, 0, 0.019999999552965164, 0), (0.024800000712275505, -0.003000000026077032, 0.005499999970197678, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_4" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0496, -0.0478, -0.02), (0.0496, 0.0478, 0.02)]
                    
                    matrix4d xformOp:transform = ( (0.04960000142455101, 0, 0, 0), (0, 0.04780000075697899, 0, 0), (0, 0, 0.019999999552965164, 0), (0.024800000712275505, -0.003000000026077032, 0.005499999970197678, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Hip" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.006099999882280827, -0.29100000858306885, -0.06229999661445618, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_5" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17600003, -0.0606, -0.0606), (0.17600003, 0.0606, 0.0606)]
                    double height = 0.230800062417984
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.060600001364946365
                    matrix4d xformOp:transform = ( (-0.022963758908119747, -0.09922008453180808, -0.9948005614967315, 0), (0.09922008453180808, 0.9899239929774946, -0.10102407683819337, 0), (0.9948005614967315, -0.10102407683819337, -0.012887751885614307, 0), (-0.004449999891221523, -0.01915000006556511, -0.19130000472068787, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_5" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17600003, -0.0606, -0.0606), (0.17600003, 0.0606, 0.0606)]
                    double height = 0.230800062417984
                    
                    double radius = 0.060600001364946365
                    matrix4d xformOp:transform = ( (-0.022963758908119747, -0.09922008453180808, -0.9948005614967315, 0), (0.09922008453180808, 0.9899239929774946, -0.10102407683819337, 0), (0.9948005614967315, -0.10102407683819337, -0.012887751885614307, 0), (-0.004449999891221523, -0.01915000006556511, -0.19130000472068787, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Knee" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smpl_humanoid/bodies/L_Ankle>,
                </smpl_humanoid/bodies/L_Toe>,
                </smpl_humanoid/bodies/R_Toe>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.014999999664723873, -0.32930001616477966, -0.4449000060558319, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_6" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17435956, -0.0541, -0.0541), (0.17435956, 0.0541, 0.0541)]
                    double height = 0.24051912128925323
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.054099999368190765
                    matrix4d xformOp:transform = ( (-0.10518921082862365, 0.03908213269914085, -0.993684033715887, 0), (-0.03908213269914085, 0.9982930325657366, 0.043400555915357186, 0), (0.993684033715887, 0.043400555915357186, -0.1034822433943603, 0), (-0.021150000393390656, 0.007899999618530273, -0.19919998943805695, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_6" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.17435956, -0.0541, -0.0541), (0.17435956, 0.0541, 0.0541)]
                    double height = 0.24051912128925323
                    
                    double radius = 0.054099999368190765
                    matrix4d xformOp:transform = ( (-0.10518921082862365, 0.03908213269914085, -0.993684033715887, 0), (-0.03908213269914085, 0.9982930325657366, 0.043400555915357186, 0), (0.993684033715887, 0.043400555915357186, -0.1034822433943603, 0), (-0.021150000393390656, 0.007899999618530273, -0.19919998943805695, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Ankle" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smpl_humanoid/bodies/L_Knee>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.05730000138282776, -0.3135000169277191, -0.8432999849319458, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_7" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0865, -0.0483, -0.0478), (0.0865, 0.0483, 0.0478)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.08649999648332596, 0, 0, 0), (0, 0.04830000177025795, 0, 0), (0, 0, 0.04780000075697899, 0), (0.025599999353289604, -0.021199999377131462, -0.017400000244379044, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_7" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0865, -0.0483, -0.0478), (0.0865, 0.0483, 0.0478)]
                    
                    matrix4d xformOp:transform = ( (0.08649999648332596, 0, 0, 0), (0, 0.04830000177025795, 0, 0), (0, 0, 0.04780000075697899, 0), (0.025599999353289604, -0.021199999377131462, -0.017400000244379044, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Toe" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smpl_humanoid/bodies/L_Knee>,
                </smpl_humanoid/bodies/R_Knee>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.06599999964237213, -0.33890002965927124, -0.8913999795913696, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_8" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0493, -0.0479, -0.0216), (0.0493, 0.0479, 0.0216)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.049300000071525574, 0, 0, 0), (0, 0.0478999987244606, 0, 0), (0, 0, 0.02160000056028366, 0), (0.022700000554323196, 0.00419999985024333, 0.0044999998062849045, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_8" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0493, -0.0479, -0.0216), (0.0493, 0.0479, 0.0216)]
                    
                    matrix4d xformOp:transform = ( (0.049300000071525574, 0, 0, 0), (0, 0.0478999987244606, 0, 0), (0, 0, 0.02160000056028366, 0), (0.022700000554323196, 0.00419999985024333, 0.0044999998062849045, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Torso" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smpl_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.02850000001490116, -0.22579999268054962, 0.1371999979019165, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_9" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.083654806, -0.0769, -0.0769), (0.083654806, 0.0769, 0.0769)]
                    double height = 0.01350962370634079
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.07689999788999557
                    matrix4d xformOp:transform = ( (0.007402076388828394, 0.03701065877151688, 0.9992874801374754, 0), (-0.03701065877151688, 0.998640275983483, -0.03671253717843381, 0), (-0.9992874801374754, -0.03671253717843381, 0.008761800405345355, 0), (0.0005499999970197678, 0.002749999985098839, 0.06755000352859497, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_9" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.083654806, -0.0769, -0.0769), (0.083654806, 0.0769, 0.0769)]
                    double height = 0.01350962370634079
                    
                    double radius = 0.07689999788999557
                    matrix4d xformOp:transform = ( (0.007402076388828394, 0.03701065877151688, 0.9992874801374754, 0), (-0.03701065877151688, 0.998640275983483, -0.03671253717843381, 0), (-0.9992874801374754, -0.03671253717843381, 0.008761800405345355, 0), (0.0005499999970197678, 0.002749999985098839, 0.06755000352859497, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Spine" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.027400000020861626, -0.22029998898506165, 0.27239999175071716, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_10" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.07845212, -0.0755, -0.0755), (0.07845212, 0.0755, 0.0755)]
                    double height = 0.00590423634275794
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.0754999965429306
                    matrix4d xformOp:transform = ( (0.4403618872690447, 0.016936992206694867, 0.8976605616635425, 0), (-0.016936992206694867, 0.9998008405180587, -0.010555452245490926, 0), (-0.8976605616635425, -0.010555452245490926, 0.44056104675098595, 0), (0.012700000777840614, 0.000750000006519258, 0.02645000070333481, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_10" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.07845212, -0.0755, -0.0755), (0.07845212, 0.0755, 0.0755)]
                    double height = 0.00590423634275794
                    
                    double radius = 0.0754999965429306
                    matrix4d xformOp:transform = ( (0.4403618872690447, 0.016936992206694867, 0.8976605616635425, 0), (-0.016936992206694867, 0.9998008405180587, -0.010555452245490926, 0), (-0.8976605616635425, -0.010555452245490926, 0.44056104675098595, 0), (0.012700000777840614, 0.000750000006519258, 0.02645000070333481, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Chest" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = [
                </smpl_humanoid/bodies/Torso>,
                </smpl_humanoid/bodies/Head>,
                </smpl_humanoid/bodies/L_Shoulder>,
                </smpl_humanoid/bodies/R_Shoulder>,
            ]
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0020000003278255463, -0.21879999339580536, 0.3252999782562256, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_11" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.10799792, -0.1002, -0.1002), (0.10799792, 0.1002, 0.1002)]
                    double height = 0.015595834702253342
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.10019999742507935
                    matrix4d xformOp:transform = ( (-0.25006691621620214, -0.006411973064500476, 0.9682074862017771, 0), (0.006411973064500476, 0.9999451772621161, 0.00827822960254665, 0), (-0.9682074862017771, 0.00827822960254665, -0.2500120934783183, 0), (-0.01924999989569187, -0.0009500000160187483, 0.07575000077486038, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_11" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.10799792, -0.1002, -0.1002), (0.10799792, 0.1002, 0.1002)]
                    double height = 0.015595834702253342
                    
                    double radius = 0.10019999742507935
                    matrix4d xformOp:transform = ( (-0.25006691621620214, -0.006411973064500476, 0.9682074862017771, 0), (0.006411973064500476, 0.9999451772621161, 0.00827822960254665, 0), (-0.9682074862017771, 0.00827822960254665, -0.2500120934783183, 0), (-0.01924999989569187, -0.0009500000160187483, 0.07575000077486038, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Neck" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.04490000009536743, -0.2215999960899353, 0.539199948310852, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_12" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.06849603, -0.0436, -0.0436), (0.06849603, 0.0436, 0.0436)]
                    double height = 0.04979206994175911
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04360000044107437
                    matrix4d xformOp:transform = ( (0.6185723071703046, 0.0622589219158165, 0.7832574138282666, 0), (-0.0622589219158165, 0.9976051900591054, -0.030128254444425462, 0), (-0.7832574138282666, -0.030128254444425462, 0.6209671171111992, 0), (0.025699999183416367, 0.0025500000920146704, 0.032499998807907104, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_12" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.06849603, -0.0436, -0.0436), (0.06849603, 0.0436, 0.0436)]
                    double height = 0.04979206994175911
                    
                    double radius = 0.04360000044107437
                    matrix4d xformOp:transform = ( (0.6185723071703046, 0.0622589219158165, 0.7832574138282666, 0), (-0.0622589219158165, 0.9976051900591054, -0.030128254444425462, 0), (-0.7832574138282666, -0.030128254444425462, 0.6209671171111992, 0), (0.025699999183416367, 0.0025500000920146704, 0.032499998807907104, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "Head" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smpl_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.006400000303983688, -0.21639999747276306, 0.6041999459266663, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_13" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.076, -0.0606, -0.1154), (0.076, 0.0606, 0.1154)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.07599999755620956, 0, 0, 0), (0, 0.060600001364946365, 0, 0), (0, 0, 0.11540000140666962, 0), (-0.011599999852478504, -0.00419999985024333, 0.08760000020265579, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_13" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.076, -0.0606, -0.1154), (0.076, 0.0606, 0.1154)]
                    
                    matrix4d xformOp:transform = ( (0.07599999755620956, 0, 0, 0), (0, 0.060600001364946365, 0, 0), (0, 0, 0.11540000140666962, 0), (-0.011599999852478504, -0.00419999985024333, 0.08760000020265579, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Thorax" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.03610000014305115, -0.13999998569488525, 0.4469999670982361, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_14" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08101427, -0.0521, -0.0521), (0.08101427, 0.0521, 0.0521)]
                    double height = 0.05782854184508324
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05209999904036522
                    matrix4d xformOp:transform = ( (-0.09165033051700222, 0.9441705227366981, 0.31645275210281376, 0), (-0.9441705227366981, 0.01859612768646457, -0.3289320613587776, 0), (-0.31645275210281376, -0.3289320613587776, 0.8897535417965332, 0), (-0.004449999891221523, 0.045500002801418304, 0.015249999240040779, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_14" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08101427, -0.0521, -0.0521), (0.08101427, 0.0521, 0.0521)]
                    double height = 0.05782854184508324
                    
                    double radius = 0.05209999904036522
                    matrix4d xformOp:transform = ( (-0.09165033051700222, 0.9441705227366981, 0.31645275210281376, 0), (-0.9441705227366981, 0.01859612768646457, -0.3289320613587776, 0), (-0.31645275210281376, -0.3289320613587776, 0.8897535417965332, 0), (-0.004449999891221523, 0.045500002801418304, 0.015249999240040779, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Shoulder" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smpl_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.04500000178813934, -0.04899998754262924, 0.47749996185302734, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_15" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13012776, -0.0517, -0.0517), (0.13012776, 0.0517, 0.0517)]
                    double height = 0.156855508685112
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05169999971985817
                    matrix4d xformOp:transform = ( (-0.10519239866137697, 0.993270810996421, -0.04845223674910759, 0), (-0.993270810996421, -0.10256879630480853, 0.05378384601591968, 0), (0.04845223674910759, 0.05378384601591968, 0.9973763976434316, 0), (-0.013749999925494194, 0.1297999918460846, -0.006400000303983688, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_15" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.13012776, -0.0517, -0.0517), (0.13012776, 0.0517, 0.0517)]
                    double height = 0.156855508685112
                    
                    double radius = 0.05169999971985817
                    matrix4d xformOp:transform = ( (-0.10519239866137697, 0.993270810996421, -0.04845223674910759, 0), (-0.993270810996421, -0.10256879630480853, 0.05378384601591968, 0), (0.04845223674910759, 0.05378384601591968, 0.9973763976434316, 0), (-0.013749999925494194, 0.1297999918460846, -0.006400000303983688, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Elbow" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07250000536441803, 0.21060001850128174, 0.46469995379447937, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_16" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11534953, -0.0405, -0.0405), (0.11534953, 0.0405, 0.0405)]
                    double height = 0.14969906210899353
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.04050000011920929
                    matrix4d xformOp:transform = ( (-0.00467614309579556, 0.999338282561169, 0.03607236906798983, 0), (-0.999338282561169, -0.0033688141391010618, -0.036217856161956385, 0), (-0.03607236906798983, -0.036217856161956385, 0.9986926710433056, 0), (-0.0005499999970197678, 0.12459999322891235, 0.0044999998062849045, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_16" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.11534953, -0.0405, -0.0405), (0.11534953, 0.0405, 0.0405)]
                    double height = 0.14969906210899353
                    
                    double radius = 0.04050000011920929
                    matrix4d xformOp:transform = ( (-0.00467614309579556, 0.999338282561169, 0.03607236906798983, 0), (-0.999338282561169, -0.0033688141391010618, -0.036217856161956385, 0), (-0.03607236906798983, -0.036217856161956385, 0.9986926710433056, 0), (-0.0005499999970197678, 0.12459999322891235, 0.0044999998062849045, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Wrist" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07370000332593918, 0.45980000495910645, 0.4736999571323395, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_17" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.057515606, -0.0318, -0.0318), (0.057515606, 0.0318, 0.0318)]
                    double height = 0.051431212574243546
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.03180000185966492
                    matrix4d xformOp:transform = ( (-0.17499099970421073, 0.9799496170573434, -0.09527289432356945, 0), (-0.9799496170573434, -0.16398878743393652, 0.11316559423944739, 0), (0.09527289432356945, 0.11316559423944739, 0.9889977877297258, 0), (-0.007500000298023224, 0.041999999433755875, -0.004050000105053186, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_17" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.057515606, -0.0318, -0.0318), (0.057515606, 0.0318, 0.0318)]
                    double height = 0.051431212574243546
                    
                    double radius = 0.03180000185966492
                    matrix4d xformOp:transform = ( (-0.17499099970421073, 0.9799496170573434, -0.09527289432356945, 0), (-0.9799496170573434, -0.16398878743393652, 0.11316559423944739, 0), (0.09527289432356945, 0.11316559423944739, 0.9889977877297258, 0), (-0.007500000298023224, 0.041999999433755875, -0.004050000105053186, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "L_Hand" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.08860000222921371, 0.5437999963760376, 0.46549996733665466, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_18" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0538, -0.0585, -0.0158), (0.0538, 0.0585, 0.0158)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.05380000174045563, 0, 0, 0), (0, 0.05849999934434891, 0, 0), (0, 0, 0.015799999237060547, 0), (-0.005799999926239252, 0.049300000071525574, 0.0010000000474974513, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_18" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0538, -0.0585, -0.0158), (0.0538, 0.0585, 0.0158)]
                    
                    matrix4d xformOp:transform = ( (0.05380000174045563, 0, 0, 0), (0, 0.05849999934434891, 0, 0), (0, 0, 0.015799999237060547, 0), (-0.005799999926239252, 0.049300000071525574, 0.0010000000474974513, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Thorax" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.0406000018119812, -0.30059999227523804, 0.44409996271133423, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_19" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08162974, -0.0511, -0.0511), (0.08162974, 0.0511, 0.0511)]
                    double height = 0.061059482395648956
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.051100000739097595
                    matrix4d xformOp:transform = ( (-0.09007595401082158, -0.9433424342020515, 0.3193607169806221, 0), (0.9433424342020515, 0.02201172955016517, 0.33108977601934164, 0), (-0.3193607169806221, 0.33108977601934164, 0.8879123164390132, 0), (-0.004550000187009573, -0.04800000041723251, 0.016249999403953552, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_19" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.08162974, -0.0511, -0.0511), (0.08162974, 0.0511, 0.0511)]
                    double height = 0.061059482395648956
                    
                    double radius = 0.051100000739097595
                    matrix4d xformOp:transform = ( (-0.09007595401082158, -0.9433424342020515, 0.3193607169806221, 0), (0.9433424342020515, 0.02201172955016517, 0.33108977601934164, 0), (-0.3193607169806221, 0.33108977601934164, 0.8879123164390132, 0), (-0.004550000187009573, -0.04800000041723251, 0.016249999403953552, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Shoulder" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            rel physics:filteredPairs = </smpl_humanoid/bodies/Chest>
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.04970000311732292, -0.39660000801086426, 0.47669994831085205, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_20" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.12962309, -0.0531, -0.0531), (0.12962309, 0.0531, 0.0531)]
                    double height = 0.15304617583751678
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.05310000106692314
                    matrix4d xformOp:transform = ( (-0.08363487000130476, -0.9951245802788335, -0.052271813976367376, 0), (0.9951245802788335, -0.08065315204846257, -0.05676445106101635, 0), (0.052271813976367376, -0.05676445106101635, 0.9970182820471577, 0), (-0.010700000450015068, -0.12684999406337738, -0.006700000260025263, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_20" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.12962309, -0.0531, -0.0531), (0.12962309, 0.0531, 0.0531)]
                    double height = 0.15304617583751678
                    
                    double radius = 0.05310000106692314
                    matrix4d xformOp:transform = ( (-0.08363487000130476, -0.9951245802788335, -0.052271813976367376, 0), (0.9951245802788335, -0.08065315204846257, -0.05676445106101635, 0), (0.052271813976367376, -0.05676445106101635, 0.9970182820471577, 0), (-0.010700000450015068, -0.12684999406337738, -0.006700000260025263, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Elbow" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07110000401735306, -0.6503000259399414, 0.4633999466896057, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_21" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.117402315, -0.0408, -0.0408), (0.117402315, 0.0408, 0.0408)]
                    double height = 0.15320463478565216
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.040800001472234726
                    matrix4d xformOp:transform = ( (-0.021539900747069796, -0.9993170524110511, 0.030025202856322597, 0), (0.9993170524110511, -0.020618542011114016, 0.03066522150189721, 0), (-0.030025202856322597, 0.03066522150189721, 0.9990786412640442, 0), (-0.002749999985098839, -0.12764999270439148, 0.003900000127032399, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_21" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.117402315, -0.0408, -0.0408), (0.117402315, 0.0408, 0.0408)]
                    double height = 0.15320463478565216
                    
                    double radius = 0.040800001472234726
                    matrix4d xformOp:transform = ( (-0.021539900747069796, -0.9993170524110511, 0.030025202856322597, 0), (0.9993170524110511, -0.020618542011114016, 0.03066522150189721, 0), (-0.030025202856322597, 0.03066522150189721, 0.9990786412640442, 0), (-0.002749999985098839, -0.12764999270439148, 0.003900000127032399, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Wrist" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.07670000195503235, -0.9056000113487244, 0.47119995951652527, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Capsule "_geom_22" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.058255263, -0.0326, -0.0326), (0.058255263, 0.0326, 0.0326)]
                    double height = 0.051310524344444275
                    uniform token physics:approximation = "convexHull"
                    uniform token purpose = "guide"
                    double radius = 0.032600000500679016
                    matrix4d xformOp:transform = ( (-0.12083296351485062, -0.990050373864868, -0.07210996661934921, 0), (0.990050373864868, -0.11491844893425451, -0.08120468842620632, 0), (0.07210996661934921, -0.08120468842620632, 0.9940854854194039, 0), (-0.005200000014156103, -0.04230000078678131, -0.0030499999411404133, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Capsule "_geom_22" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform token axis = "X"
                    float3[] extent = [(-0.058255263, -0.0326, -0.0326), (0.058255263, 0.0326, 0.0326)]
                    double height = 0.051310524344444275
                    
                    double radius = 0.032600000500679016
                    matrix4d xformOp:transform = ( (-0.12083296351485062, -0.990050373864868, -0.07210996661934921, 0), (0.990050373864868, -0.11491844893425451, -0.08120468842620632, 0), (0.07210996661934921, -0.08120468842620632, 0.9940854854194039, 0), (-0.005200000014156103, -0.04230000078678131, -0.0030499999411404133, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }

        def Xform "R_Hand" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsFilteredPairsAPI"]
        )
        {
            float physics:density = 0
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.08700000494718552, -0.9902000427246094, 0.465099960565567, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            def "collisions"
            {
                def Cube "_geom_23" (
                    apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI"]
                )
                {
                    float3[] extent = [(-0.0546, -0.0569, -0.0164), (0.0546, 0.0569, 0.0164)]
                    uniform token physics:approximation = "boundingCube"
                    uniform token purpose = "guide"
                    matrix4d xformOp:transform = ( (0.05460000038146973, 0, 0, 0), (0, 0.05689999833703041, 0, 0), (0, 0, 0.01640000008046627, 0), (-0.007899999618530273, -0.04619999974966049, -0.0008999999845400453, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }

            def "visuals"
            {
                def Cube "_geom_23" (
                    apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3[] extent = [(-0.0546, -0.0569, -0.0164), (0.0546, 0.0569, 0.0164)]
                    
                    matrix4d xformOp:transform = ( (0.05460000038146973, 0, 0, 0), (0, 0.05689999833703041, 0, 0), (0, 0, 0.01640000008046627, 0), (-0.007899999618530273, -0.04619999974966049, -0.0008999999845400453, 1) )
                    uniform token[] xformOpOrder = ["xformOp:transform"]
                }
            }
        }
    }
    def "joints"
    {
        def PhysicsJoint "L_Hip" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Hip_x"
            custom token mjcf:rotY:name = "L_Hip_y"
            custom token mjcf:rotZ:name = "L_Hip_z"
            rel physics:body0 = </smpl_humanoid/bodies/Pelvis>
            rel physics:body1 = </smpl_humanoid/bodies/L_Hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0068000006, 0.0695, -0.0914)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Knee" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Knee_x"
            custom token mjcf:rotY:name = "L_Knee_y"
            custom token mjcf:rotZ:name = "L_Knee_z"
            rel physics:body0 = </smpl_humanoid/bodies/L_Hip>
            rel physics:body1 = </smpl_humanoid/bodies/L_Knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0045, 0.0343, -0.3752)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Ankle" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Ankle_x"
            custom token mjcf:rotY:name = "L_Ankle_y"
            custom token mjcf:rotZ:name = "L_Ankle_z"
            rel physics:body0 = </smpl_humanoid/bodies/L_Knee>
            rel physics:body1 = </smpl_humanoid/bodies/L_Ankle>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.043700002, -0.013600007, -0.39800003)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "L_Toe" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Toe_x"
            custom token mjcf:rotY:name = "L_Toe_y"
            custom token mjcf:rotZ:name = "L_Toe_z"
            rel physics:body0 = </smpl_humanoid/bodies/L_Ankle>
            rel physics:body1 = </smpl_humanoid/bodies/L_Toe>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.1193, 0.0264, -0.05580002)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Hip" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Hip_x"
            custom token mjcf:rotY:name = "R_Hip_y"
            custom token mjcf:rotZ:name = "R_Hip_z"
            rel physics:body0 = </smpl_humanoid/bodies/Pelvis>
            rel physics:body1 = </smpl_humanoid/bodies/R_Hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0043, -0.06770001, -0.0905)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Knee" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Knee_x"
            custom token mjcf:rotY:name = "R_Knee_y"
            custom token mjcf:rotZ:name = "R_Knee_z"
            rel physics:body0 = </smpl_humanoid/bodies/R_Hip>
            rel physics:body1 = </smpl_humanoid/bodies/R_Knee>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0089, -0.038300008, -0.3826)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Ankle" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 80
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 800
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 80
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 800
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 80
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 800
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Ankle_x"
            custom token mjcf:rotY:name = "R_Ankle_y"
            custom token mjcf:rotZ:name = "R_Ankle_z"
            rel physics:body0 = </smpl_humanoid/bodies/R_Knee>
            rel physics:body1 = </smpl_humanoid/bodies/R_Ankle>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0423, 0.0158, -0.39839998)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 80
            float physxLimit:rotX:stiffness = 800
            float physxLimit:rotY:damping = 80
            float physxLimit:rotY:stiffness = 800
            float physxLimit:rotZ:damping = 80
            float physxLimit:rotZ:stiffness = 800
        }

        def PhysicsJoint "R_Toe" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Toe_x"
            custom token mjcf:rotY:name = "R_Toe_y"
            custom token mjcf:rotZ:name = "R_Toe_z"
            rel physics:body0 = </smpl_humanoid/bodies/R_Ankle>
            rel physics:body1 = </smpl_humanoid/bodies/R_Toe>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.1233, -0.025400013, -0.048099995)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "Torso" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Torso_x"
            custom token mjcf:rotY:name = "Torso_y"
            custom token mjcf:rotZ:name = "Torso_z"
            rel physics:body0 = </smpl_humanoid/bodies/Pelvis>
            rel physics:body1 = </smpl_humanoid/bodies/Torso>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0267, -0.0024999976, 0.109)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Spine" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Spine_x"
            custom token mjcf:rotY:name = "Spine_y"
            custom token mjcf:rotZ:name = "Spine_z"
            rel physics:body0 = </smpl_humanoid/bodies/Torso>
            rel physics:body1 = </smpl_humanoid/bodies/Spine>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0011, 0.0055000037, 0.1352)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Chest" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 100
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 1000
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 100
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 1000
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 100
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 1000
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Chest_x"
            custom token mjcf:rotY:name = "Chest_y"
            custom token mjcf:rotZ:name = "Chest_z"
            rel physics:body0 = </smpl_humanoid/bodies/Spine>
            rel physics:body1 = </smpl_humanoid/bodies/Chest>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0254, 0.0014999956, 0.052899987)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 100
            float physxLimit:rotX:stiffness = 1000
            float physxLimit:rotY:damping = 100
            float physxLimit:rotY:stiffness = 1000
            float physxLimit:rotZ:damping = 100
            float physxLimit:rotZ:stiffness = 1000
        }

        def PhysicsJoint "Neck" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Neck_x"
            custom token mjcf:rotY:name = "Neck_y"
            custom token mjcf:rotZ:name = "Neck_z"
            rel physics:body0 = </smpl_humanoid/bodies/Chest>
            rel physics:body1 = </smpl_humanoid/bodies/Neck>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0429, -0.0028000027, 0.21389997)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "Head" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "Head_x"
            custom token mjcf:rotY:name = "Head_y"
            custom token mjcf:rotZ:name = "Head_z"
            rel physics:body0 = </smpl_humanoid/bodies/Neck>
            rel physics:body1 = </smpl_humanoid/bodies/Head>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.0513, 0.0051999986, 0.065)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Thorax" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Thorax_x"
            custom token mjcf:rotY:name = "L_Thorax_y"
            custom token mjcf:rotZ:name = "L_Thorax_z"
            rel physics:body0 = </smpl_humanoid/bodies/Chest>
            rel physics:body1 = </smpl_humanoid/bodies/L_Thorax>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0341, 0.07880001, 0.12169999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Shoulder" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Shoulder_x"
            custom token mjcf:rotY:name = "L_Shoulder_y"
            custom token mjcf:rotZ:name = "L_Shoulder_z"
            rel physics:body0 = </smpl_humanoid/bodies/L_Thorax>
            rel physics:body1 = </smpl_humanoid/bodies/L_Shoulder>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.008900002, 0.091, 0.030499995)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Elbow" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Elbow_x"
            custom token mjcf:rotY:name = "L_Elbow_y"
            custom token mjcf:rotZ:name = "L_Elbow_z"
            rel physics:body0 = </smpl_humanoid/bodies/L_Shoulder>
            rel physics:body1 = </smpl_humanoid/bodies/L_Elbow>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.027500004, 0.2596, -0.012800008)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "L_Wrist" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Wrist_x"
            custom token mjcf:rotY:name = "L_Wrist_y"
            custom token mjcf:rotZ:name = "L_Wrist_z"
            rel physics:body0 = </smpl_humanoid/bodies/L_Elbow>
            rel physics:body1 = </smpl_humanoid/bodies/L_Wrist>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.001199998, 0.24919999, 0.009000003)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }

        def PhysicsJoint "L_Hand" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "L_Hand_x"
            custom token mjcf:rotY:name = "L_Hand_y"
            custom token mjcf:rotZ:name = "L_Hand_z"
            rel physics:body0 = </smpl_humanoid/bodies/L_Wrist>
            rel physics:body1 = </smpl_humanoid/bodies/L_Hand>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.014899999, 0.08399999, -0.00819999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }

        def PhysicsJoint "R_Thorax" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Thorax_x"
            custom token mjcf:rotY:name = "R_Thorax_y"
            custom token mjcf:rotZ:name = "R_Thorax_z"
            rel physics:body0 = </smpl_humanoid/bodies/Chest>
            rel physics:body1 = </smpl_humanoid/bodies/R_Thorax>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0386, -0.0818, 0.118799984)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Shoulder" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Shoulder_x"
            custom token mjcf:rotY:name = "R_Shoulder_y"
            custom token mjcf:rotZ:name = "R_Shoulder_z"
            rel physics:body0 = </smpl_humanoid/bodies/R_Thorax>
            rel physics:body1 = </smpl_humanoid/bodies/R_Shoulder>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.009100001, -0.096000016, 0.032599986)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Elbow" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 50
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 500
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 50
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 500
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 50
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 500
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Elbow_x"
            custom token mjcf:rotY:name = "R_Elbow_y"
            custom token mjcf:rotZ:name = "R_Elbow_z"
            rel physics:body0 = </smpl_humanoid/bodies/R_Shoulder>
            rel physics:body1 = </smpl_humanoid/bodies/R_Elbow>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0214, -0.25370002, -0.013300002)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 50
            float physxLimit:rotX:stiffness = 500
            float physxLimit:rotY:damping = 50
            float physxLimit:rotY:stiffness = 500
            float physxLimit:rotZ:damping = 50
            float physxLimit:rotZ:stiffness = 500
        }

        def PhysicsJoint "R_Wrist" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Wrist_x"
            custom token mjcf:rotY:name = "R_Wrist_y"
            custom token mjcf:rotZ:name = "R_Wrist_z"
            rel physics:body0 = </smpl_humanoid/bodies/R_Elbow>
            rel physics:body1 = </smpl_humanoid/bodies/R_Wrist>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.005599998, -0.2553, 0.007800013)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }

        def PhysicsJoint "R_Hand" (
            apiSchemas = ["PhysxJointAPI", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysxLimitAPI:rotX", "PhysicsJointStateAPI:angular", "PhysicsDriveAPI:rotX", "PhysicsLimitAPI:rotY", "PhysxLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysxLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
        )
        {
            float drive:rotX:physics:damping = 30
            float drive:rotX:physics:maxForce = 3.4028235e38
            float drive:rotX:physics:stiffness = 300
            uniform token drive:rotX:physics:type = "force"
            float drive:rotY:physics:damping = 30
            float drive:rotY:physics:maxForce = 3.4028235e38
            float drive:rotY:physics:stiffness = 300
            uniform token drive:rotY:physics:type = "force"
            float drive:rotZ:physics:damping = 30
            float drive:rotZ:physics:maxForce = 3.4028235e38
            float drive:rotZ:physics:stiffness = 300
            uniform token drive:rotZ:physics:type = "force"
            float limit:rotX:physics:high = 180
            float limit:rotX:physics:low = -180
            float limit:rotY:physics:high = 180
            float limit:rotY:physics:low = -180
            float limit:rotZ:physics:high = 180
            float limit:rotZ:physics:low = -180
            float limit:transX:physics:high = -1
            float limit:transX:physics:low = 1
            float limit:transY:physics:high = -1
            float limit:transY:physics:low = 1
            float limit:transZ:physics:high = -1
            float limit:transZ:physics:low = 1
            custom token mjcf:rotX:name = "R_Hand_x"
            custom token mjcf:rotY:name = "R_Hand_y"
            custom token mjcf:rotZ:name = "R_Hand_z"
            rel physics:body0 = </smpl_humanoid/bodies/R_Wrist>
            rel physics:body1 = </smpl_humanoid/bodies/R_Hand>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.010300003, -0.08460003, -0.006099999)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physxJoint:armature = 0.02
            float physxLimit:rotX:damping = 30
            float physxLimit:rotX:stiffness = 300
            float physxLimit:rotY:damping = 30
            float physxLimit:rotY:stiffness = 300
            float physxLimit:rotZ:damping = 30
            float physxLimit:rotZ:stiffness = 300
        }
    }
}
