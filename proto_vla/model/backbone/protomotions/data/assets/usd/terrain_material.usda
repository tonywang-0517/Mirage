#usda 1.0
(
    defaultPrim = "Root"
    upAxis = "Z"
)

def Xform "Root"
{
    def Material "solid_white_grid"
    {
        token outputs:mdl:displacement.connect = </Root/solid_white_grid/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Root/solid_white_grid/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Root/solid_white_grid/Shader.outputs:out>
        custom uniform bool paused = 0 (
            customData = {
                bool nonpersistant = 1
            }
            hidden = true
        )
        token ui:displayGroup = "Material Graphs"
        token ui:displayName = "solid_white_grid"
        int ui:order = 1024
        uniform token[] xformOpOrder = []

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
            float2 inputs:detail_texture_scale = (1, 1) (
                customData = {
                    float2 default = (1, 1)
                }
                displayGroup = "UV"
                displayName = "Detail Texture Tiling"
                doc = "Controls the repetition of the detail texture."
                hidden = false
            )
            color3f inputs:diffuse_color_constant = (1, 0.99999, 0.99999) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                }
                displayGroup = "Albedo"
                displayName = "Albedo Color"
                doc = "This is the albedo base color"
                hidden = false
                renderType = "color"
            )
            asset inputs:diffuse_texture = @terrain_grid.png@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Albedo"
                displayName = "Albedo Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:diffuse_tint = (0.1025641, 0.10256357, 0.10256307) (
                customData = {
                    float3 default = (1, 1, 1)
                }
                displayGroup = "Albedo"
                displayName = "Color Tint"
                doc = "When enabled, this color value is multiplied over the final albedo color"
                hidden = false
                renderType = "color"
            )
            color3f inputs:emissive_color = (0, 0.8143, 0.065) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emission color"
                hidden = false
                renderType = "color"
            )
            float inputs:emissive_intensity = 0 (
                customData = {
                    float default = 40
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
                hidden = false
            )
            #asset inputs:emissive_mask_texture = @omniverse://isaac-dev.ov.nvidia.com/Isaac_cm/Environments/Grid/Materials/Textures/Wireframe_basecolor.png@ (
            #    colorSpace = "raw"
            #    customData = {
            #        asset default = @@
            #    }
            #    displayGroup = "Emissive"
            #    displayName = "Emissive Mask map"
            #    doc = "The texture masking the emissive color"
            #    hidden = false
            #    renderType = "texture_2d"
            #)
            bool inputs:enable_emission = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            bool inputs:project_uvw = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "UV"
                displayName = "Enable Project UVW Coordinates"
                doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 1 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            float inputs:specular_level = 0.7 (
                customData = {
                    float default = 0.5
                    dictionary soft_range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Reflectivity"
                displayName = "Specular"
                doc = "The specular level (intensity) of the material"
                hidden = false
            )
            float2 inputs:texture_scale = (2, 2) (
                customData = {
                    float2 default = (2, 2)
                }
                displayGroup = "UV"
                displayName = "Texture Tiling"
                doc = "Controls the repetition of the texture."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

